const { EmbedBuilder } = require('discord.js');
const NeuralNetworks = require('./NeuralNetworks.js');
const mongoClient = require('./mongoClient.js');

class MessageMonitor {
  constructor() {
    this.monitorSettings = new Map();
    this.isInitialized = false;
  }

  /**
   * Kh·ªüi t·∫°o h·ªá th·ªëng gi√°m s√°t tin nh·∫Øn
   * @param {Discord.Client} client - Discord client
   */
  async initialize(client) {
    if (this.isInitialized) {
      console.log('H·ªá th·ªëng gi√°m s√°t tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥');
      return;
    }

    // L∆∞u tham chi·∫øu ƒë·∫øn client
    this.client = client;
    console.log(`[MONITOR] ƒêang kh·ªüi t·∫°o h·ªá th·ªëng gi√°m s√°t tin nh·∫Øn v·ªõi client ID: ${client.user.id}`);

    try {
      // T·∫£i c√†i ƒë·∫∑t gi√°m s√°t t·ª´ c∆° s·ªü d·ªØ li·ªáu
      console.log('[MONITOR] ƒêang t·∫£i c√†i ƒë·∫∑t gi√°m s√°t t·ª´ c∆° s·ªü d·ªØ li·ªáu...');
      await this.loadMonitorSettings();

      // ƒêƒÉng k√Ω s·ª± ki·ªán messageCreate ri√™ng cho ch·ª©c nƒÉng monitor
      // S·ª≠ d·ª•ng Events.MessageCreate thay v√¨ 'messageCreate' ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi c√°ch ƒëƒÉng k√Ω s·ª± ki·ªán trong index.js
      console.log('[MONITOR] ƒêang ƒëƒÉng k√Ω s·ª± ki·ªán MessageCreate cho ch·ª©c nƒÉng gi√°m s√°t...');
      const { Events } = require('discord.js');
      client.on(Events.MessageCreate, this.handleMessage.bind(this));
      console.log('[MONITOR] ƒê√£ ƒëƒÉng k√Ω s·ª± ki·ªán MessageCreate th√†nh c√¥ng');

      // ƒê√°nh d·∫•u ƒë√£ kh·ªüi t·∫°o
      this.isInitialized = true;
      console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o h·ªá th·ªëng gi√°m s√°t tin nh·∫Øn th√†nh c√¥ng');
      console.log(`üîë Bot ID: ${client.user.id}`);
      console.log('üìù Ch·ª©c nƒÉng monitor s·∫Ω ƒë·ªçc t·∫•t c·∫£ tin nh·∫Øn khi ƒë∆∞·ª£c b·∫≠t');
      console.log('üîî Ch·ª©c nƒÉng monitor v√† tr√≤ chuy·ªán s·∫Ω ho·∫°t ƒë·ªông song song');
    } catch (error) {
      console.error('‚ùå L·ªói khi kh·ªüi t·∫°o h·ªá th·ªëng gi√°m s√°t tin nh·∫Øn:', error);
    }
  }

  /**
   * T·∫£i c√†i ƒë·∫∑t gi√°m s√°t t·ª´ c∆° s·ªü d·ªØ li·ªáu
   */
  async loadMonitorSettings() {
    try {
      console.log('[MONITOR] ƒêang k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu MongoDB...');
      const db = mongoClient.getDb();
      console.log('[MONITOR] ƒê√£ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu MongoDB th√†nh c√¥ng');

      // T·∫°o collection n·∫øu ch∆∞a t·ªìn t·∫°i
      try {
        console.log('[MONITOR] ƒêang t·∫°o c√°c collection c·∫ßn thi·∫øt...');
        await db.createCollection('monitor_settings');
        await db.createCollection('monitor_logs');
        console.log('[MONITOR] ƒê√£ t·∫°o c√°c collection c·∫ßn thi·∫øt th√†nh c√¥ng');
      } catch (error) {
        // B·ªè qua l·ªói n·∫øu collection ƒë√£ t·ªìn t·∫°i
        console.log('[MONITOR] C√°c collection ƒë√£ t·ªìn t·∫°i, ti·∫øp t·ª•c...');
      }

      // L·∫•y t·∫•t c·∫£ c√†i ƒë·∫∑t gi√°m s√°t
      console.log('[MONITOR] ƒêang t·∫£i c√†i ƒë·∫∑t gi√°m s√°t t·ª´ c∆° s·ªü d·ªØ li·ªáu...');
      const settings = await db.collection('monitor_settings').find({ enabled: true }).toArray();
      console.log(`[MONITOR] T√¨m th·∫•y ${settings.length} c√†i ƒë·∫∑t gi√°m s√°t ƒëang b·∫≠t`);

      // L∆∞u v√†o Map
      for (const setting of settings) {
        console.log(`[MONITOR] ƒêang t·∫£i c√†i ƒë·∫∑t cho guild ${setting.guildId}...`);
        this.monitorSettings.set(setting.guildId, {
          enabled: true,
          promptTemplate: setting.promptTemplate,
          rules: setting.rules,
          ignoredChannels: setting.ignoredChannels || [],
          ignoredRoles: setting.ignoredRoles || []
        });
        console.log(`[MONITOR] ƒê√£ t·∫£i c√†i ƒë·∫∑t cho guild ${setting.guildId} th√†nh c√¥ng`);
        console.log(`[MONITOR] S·ªë quy t·∫Øc: ${setting.rules.length}, S·ªë k√™nh b·ªè qua: ${(setting.ignoredChannels || []).length}, S·ªë vai tr√≤ b·ªè qua: ${(setting.ignoredRoles || []).length}`);
      }

      console.log(`‚úÖ ƒê√£ t·∫£i ${settings.length} c√†i ƒë·∫∑t gi√°m s√°t t·ª´ c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng`);
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i c√†i ƒë·∫∑t gi√°m s√°t:', error);
    }
  }

  /**
   * X·ª≠ l√Ω tin nh·∫Øn m·ªõi cho ch·ª©c nƒÉng monitor
   * @param {Discord.Message} message - Tin nh·∫Øn c·∫ßn x·ª≠ l√Ω
   */
  async handleMessage(message) {
    // B·ªè qua tin nh·∫Øn t·ª´ bot v√† tin nh·∫Øn kh√¥ng ph·∫£i t·ª´ guild
    if (message.author.bot || !message.guild) return;

    // Ki·ªÉm tra xem guild c√≥ b·∫≠t gi√°m s√°t kh√¥ng
    const settings = this.monitorSettings.get(message.guild.id);
    if (!settings || !settings.enabled) return;

    // Ki·ªÉm tra xem k√™nh c√≥ b·ªã b·ªè qua kh√¥ng
    if (settings.ignoredChannels.includes(message.channel.id)) return;

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ vai tr√≤ ƒë∆∞·ª£c b·ªè qua kh√¥ng
    const member = message.member;
    if (member && settings.ignoredRoles.some(roleId => member.roles.cache.has(roleId))) return;

    // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i l√† l·ªánh kh√¥ng
    if (message.content.startsWith('/')) return;

    // B·ªè qua tin nh·∫Øn tag bot ƒë·ªÉ tr√°nh xung ƒë·ªôt v·ªõi ch·ª©c nƒÉng tr√≤ chuy·ªán
    // Ch·ª©c nƒÉng tr√≤ chuy·ªán s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n khi bot ƒë∆∞·ª£c tag
    if (this.client && message.mentions.has(this.client.user)) {
      console.log(`[MONITOR] B·ªè qua tin nh·∫Øn tag bot t·ª´ ${message.author.tag}`);
      return;
    }

    // Ki·ªÉm tra n·ªôi dung tin nh·∫Øn c√≥ ch·ª©a quy t·∫Øc c·∫•m kh√¥ng
    if (settings && settings.rules) {
      // Ki·ªÉm tra tr·ª±c ti·∫øp n·ªôi dung tin nh·∫Øn c√≥ ch·ª©a quy t·∫Øc c·∫•m kh√¥ng
      const lowerCaseContent = message.content.toLowerCase();
      const violatedRule = settings.rules.find(rule => {
        const lowerCaseRule = rule.toLowerCase();
        if (lowerCaseRule.startsWith('kh√¥ng chat') || lowerCaseRule.startsWith('kh√¥ng n√≥i')) {
          const bannedWord = lowerCaseRule.replace('kh√¥ng chat', '').replace('kh√¥ng n√≥i', '').trim();
          return lowerCaseContent.includes(bannedWord);
        }
        return false;
      });

      if (violatedRule) {
        console.log(`[MONITOR] Ph√°t hi·ªán vi ph·∫°m tr·ª±c ti·∫øp: ${violatedRule} trong tin nh·∫Øn: "${message.content}"`);

        // T·∫°o k·∫øt qu·∫£ vi ph·∫°m tr·ª±c ti·∫øp
        const directViolationResults = {
          isViolation: true,
          violatedRule: violatedRule,
          severity: 'Trung b√¨nh',
          isFakeAccount: false,
          recommendation: 'C·∫£nh b√°o',
          reason: `Tin nh·∫Øn ch·ª©a n·ªôi dung b·ªã c·∫•m: ${violatedRule}`
        };

        // L∆∞u k·∫øt qu·∫£ v√†o c∆° s·ªü d·ªØ li·ªáu
        const db = mongoClient.getDb();
        const logEntry = {
          guildId: message.guild.id,
          channelId: message.channel.id,
          messageId: message.id,
          userId: message.author.id,
          message: message.content,
          timestamp: new Date(),
          isViolation: true,
          violatedRule: violatedRule,
          severity: 'Trung b√¨nh',
          isFakeAccount: false,
          recommendation: 'C·∫£nh b√°o',
          reason: `Tin nh·∫Øn ch·ª©a n·ªôi dung b·ªã c·∫•m: ${violatedRule}`,
          rawAnalysis: 'VIOLATION: C√≥\nRULE: ' + violatedRule + '\nSEVERITY: Trung b√¨nh\nFAKE: Kh√¥ng\nACTION: C·∫£nh b√°o\nREASON: Ph√°t hi·ªán tr·ª±c ti·∫øp b·ªüi h·ªá th·ªëng'
        };

        db.collection('monitor_logs').insertOne(logEntry);

        // X·ª≠ l√Ω vi ph·∫°m
        this.handleViolation(message, directViolationResults);
        return; // D·ª´ng x·ª≠ l√Ω, kh√¥ng c·∫ßn g·ªçi API
      }
    }

    // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i l√† tin nh·∫Øn c·∫£nh b√°o t·ª´ bot kh√¥ng
    if (this.client && this.client.user) {
      if (message.content.startsWith(`<@${this.client.user.id}> **C·∫¢NH B√ÅO`)) return;
      if (message.content.startsWith(`<@${this.client.user.id}> **L∆∞u √Ω`)) return;
    } else if (message.content.includes('**C·∫¢NH B√ÅO') || message.content.includes('**L∆∞u √Ω')) {
      // N·∫øu kh√¥ng c√≥ client.user, ki·ªÉm tra b·∫±ng c√°ch kh√°c
      return;
    }

    // Ghi log ƒë·ªÉ debug chi ti·∫øt h∆°n
    console.log(`[MONITOR] ƒêang ph√¢n t√≠ch tin nh·∫Øn t·ª´ ${message.author.tag}: ${message.content.substring(0, 50)}${message.content.length > 50 ? '...' : ''}`);
    console.log(`[MONITOR] Guild ID: ${message.guild.id}, Channel ID: ${message.channel.id}`);
    console.log(`[MONITOR] Tr·∫°ng th√°i gi√°m s√°t: ${settings.enabled ? 'ƒêang b·∫≠t' : 'ƒê√£ t·∫Øt'}`);
    console.log(`[MONITOR] Quy t·∫Øc gi√°m s√°t: ${settings.rules.join(', ')}`);
    console.log(`[MONITOR] S·ªë k√™nh b·ªè qua: ${settings.ignoredChannels.length}, S·ªë vai tr√≤ b·ªè qua: ${settings.ignoredRoles.length}`);

    try {
      // Ph√¢n t√≠ch tin nh·∫Øn b·∫±ng NeuralNetworks
      await this.analyzeMessage(message, settings.promptTemplate);
    } catch (error) {
      console.error('L·ªói khi ph√¢n t√≠ch tin nh·∫Øn:', error);
    }
  }

  /**
   * Ph√¢n t√≠ch tin nh·∫Øn b·∫±ng NeuralNetworks
   * @param {Discord.Message} message - Tin nh·∫Øn c·∫ßn ph√¢n t√≠ch
   * @param {string} promptTemplate - M·∫´u prompt ƒë·ªÉ ph√¢n t√≠ch
   */
  async analyzeMessage(message, promptTemplate) {
    try {
      const db = mongoClient.getDb();

      // B·ªè qua tin nh·∫Øn qu√° ng·∫Øn
      if (message.content.length < 5) return;

      // Ghi log tin nh·∫Øn ƒë·ªÉ debug
      console.log(`[MONITOR-ANALYZE] ƒêang ph√¢n t√≠ch tin nh·∫Øn: "${message.content.substring(0, 50)}${message.content.length > 50 ? '...' : ''}"`);
      console.log(`[MONITOR-ANALYZE] Quy t·∫Øc: ${this.monitorSettings.get(message.guild.id).rules.join(', ')}`);

      // Thay th·∫ø placeholder trong template
      const prompt = promptTemplate.replace('{{message}}', message.content);

      // G·ªçi NeuralNetworks ƒë·ªÉ ph√¢n t√≠ch s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c ri√™ng cho gi√°m s√°t
      const analysis = await NeuralNetworks.getMonitoringAnalysis(prompt);

      // Ph√¢n t√≠ch k·∫øt qu·∫£
      const results = this.parseAnalysisResults(analysis);

      // L∆∞u k·∫øt qu·∫£ v√†o c∆° s·ªü d·ªØ li·ªáu
      const logEntry = {
        guildId: message.guild.id,
        channelId: message.channel.id,
        messageId: message.id,
        userId: message.author.id,
        message: message.content,
        timestamp: new Date(),
        isViolation: results.isViolation,
        violatedRule: results.violatedRule,
        severity: results.severity,
        isFakeAccount: results.isFakeAccount,
        recommendation: results.recommendation,
        reason: results.reason,
        rawAnalysis: analysis
      };

      await db.collection('monitor_logs').insertOne(logEntry);

      // N·∫øu ph√°t hi·ªán vi ph·∫°m, th√¥ng b√°o cho c√°c k√™nh mod
      if (results.isViolation) {
        console.log(`[MONITOR-ANALYZE] ƒê√£ ph√°t hi·ªán vi ph·∫°m! X·ª≠ l√Ω vi ph·∫°m...`);
        await this.handleViolation(message, results);
      } else {
        console.log(`[MONITOR-ANALYZE] Kh√¥ng ph√°t hi·ªán vi ph·∫°m.`);
      }

    } catch (error) {
      console.error('[MONITOR-ANALYZE] L·ªói khi ph√¢n t√≠ch tin nh·∫Øn:', error);
    }
  }

  /**
   * Ph√¢n t√≠ch k·∫øt qu·∫£ t·ª´ NeuralNetworks
   * @param {string} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ NeuralNetworks
   * @returns {Object} - K·∫øt qu·∫£ ƒë√£ ph√¢n t√≠ch
   */
  parseAnalysisResults(analysis) {
    // M·∫∑c ƒë·ªãnh kh√¥ng vi ph·∫°m
    const defaultResults = {
      isViolation: false,
      violatedRule: 'Kh√¥ng c√≥',
      severity: 'Kh√¥ng c√≥',
      isFakeAccount: false,
      recommendation: 'Kh√¥ng c·∫ßn h√†nh ƒë·ªông',
      reason: 'Kh√¥ng c√≥ vi ph·∫°m'
    };

    try {
      // Ghi log ph√¢n t√≠ch ƒë·ªÉ debug
      console.log(`[MONITOR-PARSE] Ph√¢n t√≠ch k·∫øt qu·∫£: ${analysis.substring(0, 100)}${analysis.length > 100 ? '...' : ''}`);

      // T√¨m c√°c tr∆∞·ªùng trong ph√¢n t√≠ch (s·ª≠ d·ª•ng ti·∫øng Anh)
      const violationMatch = analysis.match(/VIOLATION:\s*(C√≥|Kh√¥ng)/i);
      const ruleMatch = analysis.match(/RULE:\s*(.+?)(?=\n|$)/i);
      const severityMatch = analysis.match(/SEVERITY:\s*(Th·∫•p|Trung b√¨nh|Cao|Kh√¥ng c√≥)/i);
      const fakeMatch = analysis.match(/FAKE:\s*(C√≥|Kh√¥ng)/i);
      const recommendationMatch = analysis.match(/ACTION:\s*(.+?)(?=\n|$)/i);
      const reasonMatch = analysis.match(/REASON:\s*(.+?)(?=\n|$)/i);

      // Th·ª≠ t√¨m c√°c tr∆∞·ªùng trong ph√¢n t√≠ch (s·ª≠ d·ª•ng ti·∫øng Vi·ªát - cho tr∆∞·ªùng h·ª£p c≈©)
      const oldViolationMatch = !violationMatch ? analysis.match(/VI_PH·∫†M:\s*(C√≥|Kh√¥ng)/i) : null;
      const oldRuleMatch = !ruleMatch ? analysis.match(/QUY_T·∫ÆC_VI_PH·∫†M:\s*(.+?)(?=\n|$)/i) : null;
      const oldSeverityMatch = !severityMatch ? analysis.match(/M·ª®C_ƒê·ªò:\s*(Th·∫•p|Trung b√¨nh|Cao|Kh√¥ng c√≥)/i) : null;
      const oldFakeMatch = !fakeMatch ? analysis.match(/D·∫§U_HI·ªÜU_GI·∫¢_M·∫†O:\s*(C√≥|Kh√¥ng)/i) : null;
      const oldRecommendationMatch = !recommendationMatch ? analysis.match(/ƒê·ªÄ_XU·∫§T:\s*(.+?)(?=\n|$)/i) : null;
      const oldReasonMatch = !reasonMatch ? analysis.match(/L√ù_DO:\s*(.+?)(?=\n|$)/i) : null;

      // S·ª≠ d·ª•ng k·∫øt qu·∫£ t√¨m ƒë∆∞·ª£c (uu ti√™n ti·∫øng Anh)
      const finalViolationMatch = violationMatch || oldViolationMatch;
      const finalRuleMatch = ruleMatch || oldRuleMatch;
      const finalSeverityMatch = severityMatch || oldSeverityMatch;
      const finalFakeMatch = fakeMatch || oldFakeMatch;
      const finalRecommendationMatch = recommendationMatch || oldRecommendationMatch;
      const finalReasonMatch = reasonMatch || oldReasonMatch;

      // Ghi log c√°c tr∆∞·ªùng ƒë√£ t√¨m th·∫•y
      console.log(`[MONITOR-PARSE] Vi ph·∫°m: ${finalViolationMatch ? finalViolationMatch[1] : 'Kh√¥ng t√¨m th·∫•y'}`);
      console.log(`[MONITOR-PARSE] Quy t·∫Øc vi ph·∫°m: ${finalRuleMatch ? finalRuleMatch[1] : 'Kh√¥ng t√¨m th·∫•y'}`);
      console.log(`[MONITOR-PARSE] M·ª©c ƒë·ªô: ${finalSeverityMatch ? finalSeverityMatch[1] : 'Kh√¥ng t√¨m th·∫•y'}`);
      console.log(`[MONITOR-PARSE] D·∫•u hi·ªáu gi·∫£ m·∫°o: ${finalFakeMatch ? finalFakeMatch[1] : 'Kh√¥ng t√¨m th·∫•y'}`);

      // X√°c ƒë·ªãnh c√≥ vi ph·∫°m kh√¥ng
      const isViolation = finalViolationMatch && finalViolationMatch[1].toLowerCase() === 'c√≥';

      // N·∫øu kh√¥ng vi ph·∫°m, tr·∫£ v·ªÅ k·∫øt qu·∫£ m·∫∑c ƒë·ªãnh
      if (!isViolation) {
        console.log(`[MONITOR-PARSE] Kh√¥ng ph√°t hi·ªán vi ph·∫°m, tr·∫£ v·ªÅ k·∫øt qu·∫£ m·∫∑c ƒë·ªãnh`);
        return defaultResults;
      }

      // Tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√¢n t√≠ch
      const results = {
        isViolation,
        violatedRule: finalRuleMatch ? finalRuleMatch[1].trim() : 'Kh√¥ng x√°c ƒë·ªãnh',
        severity: finalSeverityMatch ? finalSeverityMatch[1].trim() : 'Kh√¥ng x√°c ƒë·ªãnh',
        isFakeAccount: finalFakeMatch && finalFakeMatch[1].toLowerCase() === 'c√≥',
        recommendation: finalRecommendationMatch ? finalRecommendationMatch[1].trim() : 'Kh√¥ng x√°c ƒë·ªãnh',
        reason: finalReasonMatch ? finalReasonMatch[1].trim() : 'Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ'
      };

      console.log(`[MONITOR-PARSE] Ph√°t hi·ªán vi ph·∫°m! M·ª©c ƒë·ªô: ${results.severity}, Quy t·∫Øc: ${results.violatedRule}`);
      return results;
    } catch (error) {
      console.error('[MONITOR-PARSE] L·ªói khi ph√¢n t√≠ch k·∫øt qu·∫£:', error);
      return defaultResults;
    }
  }

  /**
   * X·ª≠ l√Ω vi ph·∫°m
   * @param {Discord.Message} message - Tin nh·∫Øn vi ph·∫°m
   * @param {Object} results - K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async handleViolation(message, results) {
    try {
      // T·∫°o embed th√¥ng b√°o vi ph·∫°m cho k√™nh log
      const violationEmbed = new EmbedBuilder()
        .setColor(
          results.severity === 'Cao' ? 0xFF0000 :
          results.severity === 'Trung b√¨nh' ? 0xFFA500 : 0xFFFF00
        )
        .setTitle(`üö® Ph√°t hi·ªán vi ph·∫°m ${results.isFakeAccount ? '(C√≥ d·∫•u hi·ªáu t√†i kho·∫£n gi·∫£ m·∫°o)' : ''}`)
        .setDescription(`Bot ƒë√£ ph√°t hi·ªán m·ªôt tin nh·∫Øn vi ph·∫°m quy t·∫Øc server.`)
        .addFields(
          { name: 'Ng∆∞·ªùi d√πng', value: `<@${message.author.id}> (${message.author.tag})`, inline: true },
          { name: 'K√™nh', value: `<#${message.channel.id}>`, inline: true },
          { name: 'Th·ªùi gian', value: `<t:${Math.floor(message.createdTimestamp / 1000)}:F>`, inline: true },
          { name: 'Quy t·∫Øc vi ph·∫°m', value: results.violatedRule, inline: true },
          { name: 'M·ª©c ƒë·ªô', value: results.severity, inline: true },
          { name: 'ƒê·ªÅ xu·∫•t', value: results.recommendation, inline: true },
          { name: 'L√Ω do', value: results.reason },
          { name: 'N·ªôi dung tin nh·∫Øn', value: message.content.length > 1024 ? message.content.substring(0, 1021) + '...' : message.content }
        )
        .setFooter({ text: `Message ID: ${message.id}` })
        .setTimestamp();

      // Ki·ªÉm tra c√†i ƒë·∫∑t k√™nh log t·ª´ c∆° s·ªü d·ªØ li·ªáu
      const db = mongoClient.getDb();
      const logSettings = await db.collection('mod_settings').findOne({
        guildId: message.guild.id
      });

      let logChannel = null;

      // N·∫øu c√≥ c√†i ƒë·∫∑t k√™nh log v√† monitorLogs ƒë∆∞·ª£c b·∫≠t
      if (logSettings && logSettings.logChannelId && logSettings.monitorLogs !== false) {
        try {
          logChannel = await message.guild.channels.fetch(logSettings.logChannelId);
        } catch (error) {
          console.error(`Kh√¥ng th·ªÉ t√¨m th·∫•y k√™nh log ${logSettings.logChannelId}:`, error);
        }
      }

      // N·∫øu kh√¥ng c√≥ k√™nh log ƒë∆∞·ª£c c√†i ƒë·∫∑t, t√¨m k√™nh m·∫∑c ƒë·ªãnh
      if (!logChannel) {
        logChannel = message.guild.channels.cache.find(
          channel => channel.name.includes('mod-logs') ||
                    channel.name.includes('mod-chat') ||
                    channel.name.includes('admin') ||
                    channel.name.includes('bot-logs')
        );
      }

      // G·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh log
      if (logChannel && logChannel.isTextBased()) {
        await logChannel.send({ embeds: [violationEmbed] });
      }

      // T·∫°o tin nh·∫Øn c·∫£nh b√°o tr·ª±c ti·∫øp cho ng∆∞·ªùi vi ph·∫°m
      let warningMessage = `<@${message.author.id}> `;

      // T·∫°o n·ªôi dung c·∫£nh b√°o d·ª±a tr√™n m·ª©c ƒë·ªô nghi√™m tr·ªçng
      if (results.severity === 'Cao') {
        warningMessage += `**C·∫¢NH B√ÅO NGHI√äM TR·ªåNG**: ${results.reason}. `;
        warningMessage += `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}. `;
        warningMessage += `H√†nh vi n√†y c√≥ th·ªÉ d·∫´n ƒë·∫øn vi·ªác b·ªã mute ho·∫∑c ban.`;
      } else if (results.severity === 'Trung b√¨nh') {
        warningMessage += `**C·∫¢NH B√ÅO**: ${results.reason}. `;
        warningMessage += `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}. `;
        warningMessage += `Vui l√≤ng tu√¢n th·ªß quy t·∫Øc c·ªßa server.`;
      } else {
        warningMessage += `**L∆∞u √Ω**: ${results.reason}. `;
        warningMessage += `H√£y ch√∫ √Ω ƒë·∫øn quy t·∫Øc: ${results.violatedRule}.`;
      }

      // G·ª≠i c·∫£nh b√°o tr·ª±c ti·∫øp v√†o k√™nh
      try {
        await message.channel.send(warningMessage);
      } catch (error) {
        console.error('Kh√¥ng th·ªÉ g·ª≠i c·∫£nh b√°o tr·ª±c ti·∫øp:', error);
      }

      // Th·ª±c hi·ªán h√†nh ƒë·ªông t·ª± ƒë·ªông d·ª±a tr√™n ƒë·ªÅ xu·∫•t (n·∫øu c·∫ßn)
      if (results.severity === 'Cao' && results.recommendation.includes('X√≥a tin nh·∫Øn')) {
        try {
          await message.delete();
          console.log(`ƒê√£ x√≥a tin nh·∫Øn vi ph·∫°m t·ª´ ${message.author.tag}`);
        } catch (error) {
          console.error('Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn:', error);
        }
      }

    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω vi ph·∫°m:', error);
    }
  }

  /**
   * B·∫≠t gi√°m s√°t cho m·ªôt guild
   * @param {string} guildId - ID c·ªßa guild
   * @param {Object} settings - C√†i ƒë·∫∑t gi√°m s√°t
   */
  enableMonitoring(guildId, settings) {
    this.monitorSettings.set(guildId, {
      enabled: true,
      promptTemplate: settings.promptTemplate,
      rules: settings.rules,
      ignoredChannels: settings.ignoredChannels || [],
      ignoredRoles: settings.ignoredRoles || []
    });

    console.log(`ƒê√£ b·∫≠t gi√°m s√°t cho guild ${guildId}`);
    console.log(`Bot s·∫Ω ƒë·ªçc t·∫•t c·∫£ tin nh·∫Øn trong guild ${guildId} ƒë·ªÉ ki·ªÉm tra vi ph·∫°m`);
    console.log(`Quy t·∫Øc gi√°m s√°t: ${settings.rules.join(', ')}`);
  }

  /**
   * T·∫Øt gi√°m s√°t cho m·ªôt guild
   * @param {string} guildId - ID c·ªßa guild
   */
  disableMonitoring(guildId) {
    const settings = this.monitorSettings.get(guildId);
    if (settings) {
      settings.enabled = false;
      this.monitorSettings.set(guildId, settings);
      console.log(`ƒê√£ t·∫Øt gi√°m s√°t cho guild ${guildId}`);
      console.log(`Bot s·∫Ω kh√¥ng c√≤n ƒë·ªçc t·∫•t c·∫£ tin nh·∫Øn trong guild ${guildId}`);
      console.log(`Ch·ª©c nƒÉng tr√≤ chuy·ªán khi ƒë∆∞·ª£c tag v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng`);
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i gi√°m s√°t c·ªßa m·ªôt guild
   * @param {string} guildId - ID c·ªßa guild
   * @returns {Object|null} - C√†i ƒë·∫∑t gi√°m s√°t ho·∫∑c null n·∫øu kh√¥ng c√≥
   */
  getMonitoringStatus(guildId) {
    return this.monitorSettings.get(guildId) || null;
  }
}

// T·∫°o v√† xu·∫•t instance duy nh·∫•t
const messageMonitor = new MessageMonitor();
module.exports = messageMonitor;
