const { EmbedBuilder } = require('discord.js');
const NeuralNetworks = require('./NeuralNetworks.js');
const mongoClient = require('./mongoClient.js');

class MessageMonitor {
  constructor() {
    this.monitorSettings = new Map();
    this.isInitialized = false;
  }

  /**
   * Kh·ªüi t·∫°o h·ªá th·ªëng gi√°m s√°t tin nh·∫Øn
   * @param {Discord.Client} client - Discord client
   */
  async initialize(client) {
    if (this.isInitialized) return;

    this.client = client;

    try {
      // T·∫£i c√†i ƒë·∫∑t gi√°m s√°t t·ª´ c∆° s·ªü d·ªØ li·ªáu
      await this.loadMonitorSettings();

      // ƒêƒÉng k√Ω s·ª± ki·ªán messageCreate
      client.on('messageCreate', this.handleMessage.bind(this));

      this.isInitialized = true;
      console.log('ƒê√£ kh·ªüi t·∫°o h·ªá th·ªëng gi√°m s√°t tin nh·∫Øn');
    } catch (error) {
      console.error('L·ªói khi kh·ªüi t·∫°o h·ªá th·ªëng gi√°m s√°t tin nh·∫Øn:', error);
    }
  }

  /**
   * T·∫£i c√†i ƒë·∫∑t gi√°m s√°t t·ª´ c∆° s·ªü d·ªØ li·ªáu
   */
  async loadMonitorSettings() {
    try {
      const db = mongoClient.getDb();

      // T·∫°o collection n·∫øu ch∆∞a t·ªìn t·∫°i
      try {
        await db.createCollection('monitor_settings');
        await db.createCollection('monitor_logs');
      } catch (error) {
        // B·ªè qua l·ªói n·∫øu collection ƒë√£ t·ªìn t·∫°i
      }

      // L·∫•y t·∫•t c·∫£ c√†i ƒë·∫∑t gi√°m s√°t
      const settings = await db.collection('monitor_settings').find({ enabled: true }).toArray();

      // L∆∞u v√†o Map
      for (const setting of settings) {
        this.monitorSettings.set(setting.guildId, {
          enabled: true,
          promptTemplate: setting.promptTemplate,
          rules: setting.rules,
          ignoredChannels: setting.ignoredChannels || [],
          ignoredRoles: setting.ignoredRoles || []
        });
      }

      console.log(`ƒê√£ t·∫£i ${settings.length} c√†i ƒë·∫∑t gi√°m s√°t t·ª´ c∆° s·ªü d·ªØ li·ªáu`);
    } catch (error) {
      console.error('L·ªói khi t·∫£i c√†i ƒë·∫∑t gi√°m s√°t:', error);
    }
  }

  /**
   * X·ª≠ l√Ω tin nh·∫Øn m·ªõi
   * @param {Discord.Message} message - Tin nh·∫Øn c·∫ßn x·ª≠ l√Ω
   */
  async handleMessage(message) {
    // B·ªè qua tin nh·∫Øn t·ª´ bot v√† tin nh·∫Øn kh√¥ng ph·∫£i t·ª´ guild
    if (message.author.bot || !message.guild) return;

    // Ki·ªÉm tra xem guild c√≥ b·∫≠t gi√°m s√°t kh√¥ng
    const settings = this.monitorSettings.get(message.guild.id);
    if (!settings || !settings.enabled) return;

    // Ki·ªÉm tra xem k√™nh c√≥ b·ªã b·ªè qua kh√¥ng
    if (settings.ignoredChannels.includes(message.channel.id)) return;

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ vai tr√≤ ƒë∆∞·ª£c b·ªè qua kh√¥ng
    const member = message.member;
    if (member && settings.ignoredRoles.some(roleId => member.roles.cache.has(roleId))) return;

    try {
      // Ph√¢n t√≠ch tin nh·∫Øn b·∫±ng NeuralNetworks
      await this.analyzeMessage(message, settings.promptTemplate);
    } catch (error) {
      console.error('L·ªói khi ph√¢n t√≠ch tin nh·∫Øn:', error);
    }
  }

  /**
   * Ph√¢n t√≠ch tin nh·∫Øn b·∫±ng NeuralNetworks
   * @param {Discord.Message} message - Tin nh·∫Øn c·∫ßn ph√¢n t√≠ch
   * @param {string} promptTemplate - M·∫´u prompt ƒë·ªÉ ph√¢n t√≠ch
   */
  async analyzeMessage(message, promptTemplate) {
    try {
      const db = mongoClient.getDb();

      // B·ªè qua tin nh·∫Øn qu√° ng·∫Øn
      if (message.content.length < 5) return;

      // Thay th·∫ø placeholder trong template
      const prompt = promptTemplate.replace('{{message}}', message.content);

      // G·ªçi NeuralNetworks ƒë·ªÉ ph√¢n t√≠ch
      const analysis = await NeuralNetworks.getCompletion(prompt);

      // Ph√¢n t√≠ch k·∫øt qu·∫£
      const results = this.parseAnalysisResults(analysis);

      // L∆∞u k·∫øt qu·∫£ v√†o c∆° s·ªü d·ªØ li·ªáu
      const logEntry = {
        guildId: message.guild.id,
        channelId: message.channel.id,
        messageId: message.id,
        userId: message.author.id,
        message: message.content,
        timestamp: new Date(),
        isViolation: results.isViolation,
        violatedRule: results.violatedRule,
        severity: results.severity,
        isFakeAccount: results.isFakeAccount,
        recommendation: results.recommendation,
        reason: results.reason,
        rawAnalysis: analysis
      };

      await db.collection('monitor_logs').insertOne(logEntry);

      // N·∫øu ph√°t hi·ªán vi ph·∫°m, th√¥ng b√°o cho c√°c k√™nh mod
      if (results.isViolation) {
        await this.handleViolation(message, results);
      }

    } catch (error) {
      console.error('L·ªói khi ph√¢n t√≠ch tin nh·∫Øn:', error);
    }
  }

  /**
   * Ph√¢n t√≠ch k·∫øt qu·∫£ t·ª´ NeuralNetworks
   * @param {string} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ NeuralNetworks
   * @returns {Object} - K·∫øt qu·∫£ ƒë√£ ph√¢n t√≠ch
   */
  parseAnalysisResults(analysis) {
    // M·∫∑c ƒë·ªãnh kh√¥ng vi ph·∫°m
    const defaultResults = {
      isViolation: false,
      violatedRule: 'Kh√¥ng c√≥',
      severity: 'Kh√¥ng c√≥',
      isFakeAccount: false,
      recommendation: 'Kh√¥ng c·∫ßn h√†nh ƒë·ªông',
      reason: 'Kh√¥ng c√≥ vi ph·∫°m'
    };

    try {
      // T√¨m c√°c tr∆∞·ªùng trong ph√¢n t√≠ch
      const violationMatch = analysis.match(/VI_PH·∫†M:\s*(C√≥|Kh√¥ng)/i);
      const ruleMatch = analysis.match(/QUY_T·∫ÆC_VI_PH·∫†M:\s*(.+?)(?=\n|$)/i);
      const severityMatch = analysis.match(/M·ª®C_ƒê·ªò:\s*(Th·∫•p|Trung b√¨nh|Cao|Kh√¥ng c√≥)/i);
      const fakeMatch = analysis.match(/D·∫§U_HI·ªÜU_GI·∫¢_M·∫†O:\s*(C√≥|Kh√¥ng)/i);
      const recommendationMatch = analysis.match(/ƒê·ªÄ_XU·∫§T:\s*(.+?)(?=\n|$)/i);
      const reasonMatch = analysis.match(/L√ù_DO:\s*(.+?)(?=\n|$)/i);

      // X√°c ƒë·ªãnh c√≥ vi ph·∫°m kh√¥ng
      const isViolation = violationMatch && violationMatch[1].toLowerCase() === 'c√≥';

      // N·∫øu kh√¥ng vi ph·∫°m, tr·∫£ v·ªÅ k·∫øt qu·∫£ m·∫∑c ƒë·ªãnh
      if (!isViolation) return defaultResults;

      // Tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√¢n t√≠ch
      return {
        isViolation,
        violatedRule: ruleMatch ? ruleMatch[1].trim() : 'Kh√¥ng x√°c ƒë·ªãnh',
        severity: severityMatch ? severityMatch[1].trim() : 'Kh√¥ng x√°c ƒë·ªãnh',
        isFakeAccount: fakeMatch && fakeMatch[1].toLowerCase() === 'c√≥',
        recommendation: recommendationMatch ? recommendationMatch[1].trim() : 'Kh√¥ng x√°c ƒë·ªãnh',
        reason: reasonMatch ? reasonMatch[1].trim() : 'Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ'
      };
    } catch (error) {
      console.error('L·ªói khi ph√¢n t√≠ch k·∫øt qu·∫£:', error);
      return defaultResults;
    }
  }

  /**
   * X·ª≠ l√Ω vi ph·∫°m
   * @param {Discord.Message} message - Tin nh·∫Øn vi ph·∫°m
   * @param {Object} results - K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async handleViolation(message, results) {
    try {
      // T·∫°o embed th√¥ng b√°o vi ph·∫°m
      const violationEmbed = new EmbedBuilder()
        .setColor(
          results.severity === 'Cao' ? 0xFF0000 :
          results.severity === 'Trung b√¨nh' ? 0xFFA500 : 0xFFFF00
        )
        .setTitle(`üö® Ph√°t hi·ªán vi ph·∫°m ${results.isFakeAccount ? '(C√≥ d·∫•u hi·ªáu t√†i kho·∫£n gi·∫£ m·∫°o)' : ''}`)
        .setDescription(`Bot ƒë√£ ph√°t hi·ªán m·ªôt tin nh·∫Øn vi ph·∫°m quy t·∫Øc server.`)
        .addFields(
          { name: 'Ng∆∞·ªùi d√πng', value: `<@${message.author.id}> (${message.author.tag})`, inline: true },
          { name: 'K√™nh', value: `<#${message.channel.id}>`, inline: true },
          { name: 'Th·ªùi gian', value: `<t:${Math.floor(message.createdTimestamp / 1000)}:F>`, inline: true },
          { name: 'Quy t·∫Øc vi ph·∫°m', value: results.violatedRule, inline: true },
          { name: 'M·ª©c ƒë·ªô', value: results.severity, inline: true },
          { name: 'ƒê·ªÅ xu·∫•t', value: results.recommendation, inline: true },
          { name: 'L√Ω do', value: results.reason },
          { name: 'N·ªôi dung tin nh·∫Øn', value: message.content.length > 1024 ? message.content.substring(0, 1021) + '...' : message.content }
        )
        .setFooter({ text: `Message ID: ${message.id}` })
        .setTimestamp();

      // Ki·ªÉm tra c√†i ƒë·∫∑t k√™nh log t·ª´ c∆° s·ªü d·ªØ li·ªáu
      const db = mongoClient.getDb();
      const logSettings = await db.collection('mod_settings').findOne({
        guildId: message.guild.id
      });

      let logChannel = null;

      // N·∫øu c√≥ c√†i ƒë·∫∑t k√™nh log v√† monitorLogs ƒë∆∞·ª£c b·∫≠t
      if (logSettings && logSettings.logChannelId && logSettings.monitorLogs !== false) {
        try {
          logChannel = await message.guild.channels.fetch(logSettings.logChannelId);
        } catch (error) {
          console.error(`Kh√¥ng th·ªÉ t√¨m th·∫•y k√™nh log ${logSettings.logChannelId}:`, error);
        }
      }

      // N·∫øu kh√¥ng c√≥ k√™nh log ƒë∆∞·ª£c c√†i ƒë·∫∑t, t√¨m k√™nh m·∫∑c ƒë·ªãnh
      if (!logChannel) {
        logChannel = message.guild.channels.cache.find(
          channel => channel.name.includes('mod-logs') ||
                    channel.name.includes('mod-chat') ||
                    channel.name.includes('admin') ||
                    channel.name.includes('bot-logs')
        );
      }

      // G·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh log
      if (logChannel && logChannel.isTextBased()) {
        await logChannel.send({ embeds: [violationEmbed] });
      }

      // Th·ª±c hi·ªán h√†nh ƒë·ªông t·ª± ƒë·ªông d·ª±a tr√™n ƒë·ªÅ xu·∫•t (n·∫øu c·∫ßn)
      if (results.severity === 'Cao' && results.recommendation.includes('X√≥a tin nh·∫Øn')) {
        try {
          await message.delete();
          console.log(`ƒê√£ x√≥a tin nh·∫Øn vi ph·∫°m t·ª´ ${message.author.tag}`);
        } catch (error) {
          console.error('Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn:', error);
        }
      }

    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω vi ph·∫°m:', error);
    }
  }

  /**
   * B·∫≠t gi√°m s√°t cho m·ªôt guild
   * @param {string} guildId - ID c·ªßa guild
   * @param {Object} settings - C√†i ƒë·∫∑t gi√°m s√°t
   */
  enableMonitoring(guildId, settings) {
    this.monitorSettings.set(guildId, {
      enabled: true,
      promptTemplate: settings.promptTemplate,
      rules: settings.rules,
      ignoredChannels: settings.ignoredChannels || [],
      ignoredRoles: settings.ignoredRoles || []
    });

    console.log(`ƒê√£ b·∫≠t gi√°m s√°t cho guild ${guildId}`);
  }

  /**
   * T·∫Øt gi√°m s√°t cho m·ªôt guild
   * @param {string} guildId - ID c·ªßa guild
   */
  disableMonitoring(guildId) {
    const settings = this.monitorSettings.get(guildId);
    if (settings) {
      settings.enabled = false;
      this.monitorSettings.set(guildId, settings);
      console.log(`ƒê√£ t·∫Øt gi√°m s√°t cho guild ${guildId}`);
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i gi√°m s√°t c·ªßa m·ªôt guild
   * @param {string} guildId - ID c·ªßa guild
   * @returns {Object|null} - C√†i ƒë·∫∑t gi√°m s√°t ho·∫∑c null n·∫øu kh√¥ng c√≥
   */
  getMonitoringStatus(guildId) {
    return this.monitorSettings.get(guildId) || null;
  }
}

// T·∫°o v√† xu·∫•t instance duy nh·∫•t
const messageMonitor = new MessageMonitor();
module.exports = messageMonitor;
