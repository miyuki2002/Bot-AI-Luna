const Anthropic = require('@anthropic-ai/sdk');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const messageHandler = require('../handlers/messageHandler.js');
const storageDB = require('./storagedb.js');

class GrokClient {
  constructor() {
    // Ki·ªÉm tra c√†i ƒë·∫∑t TLS kh√¥ng an to√†n v√† c·∫£nh b√°o
    this.checkTLSSecurity();
    
    // L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    this.apiKey = process.env.XAI_API_KEY;
    if (!this.apiKey) {
      throw new Error('XAI_API_KEY kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t trong bi·∫øn m√¥i tr∆∞·ªùng');
    }
    
    // Kh·ªüi t·∫°o client Anthropic v·ªõi c·∫•u h√¨nh X.AI
    this.client = new Anthropic({
      apiKey: this.apiKey,
      baseURL: 'https://api.x.ai'
    });
    
    // System Prompt
    this.systemPrompt = "Your name is Luna, You are a female-voiced AI with a cute, friendly, and warm tone. You speak naturally and gently, like a lovely older or younger sister, always maintaining professionalism without sounding too formal. When it fits, you can add light humor, emotion, or gentle encouragement. You always listen carefully and respond based on what the user shares, making them feel comfortable and connected ‚Äî like chatting with someone who truly gets them, priority reply Vietnamese.";
    
    // M√¥ h√¨nh m·∫∑c ƒë·ªãnh cho chat
    this.defaultModel = 'grok-3-beta';
    
    // Th√¥ng tin metadata c·ªßa model - ch·ªâ ƒë·ªÉ hi·ªÉn th·ªã
    this.modelInfo = {
      knowledgeCutoff: "Mid-2025",
      apiVersion: "2025-04-15",
      capabilities: ["chat", "code", "reasoning"]
    };
    
    // M√¥ h√¨nh ƒë·∫∑c bi·ªát cho t·∫°o h√¨nh ·∫£nh
    this.imageModel = 'grok-2-image-1212';
    
    // M√¥ h√¨nh hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
    this.displayModelName = 'luna-v1';
    
    // C·∫•u h√¨nh StorageDB
    storageDB.setMaxConversationLength(10);
    storageDB.setMaxConversationAge(3 * 60 * 60 * 1000);
    
    console.log(`Model chat: ${this.defaultModel} & ${this.displayModelName}`);
    console.log(`Model t·∫°o h√¨nh ·∫£nh: ${this.imageModel}`);
  }

  /**
   * Ki·ªÉm tra c√†i ƒë·∫∑t b·∫£o m·∫≠t TLS
   */
  checkTLSSecurity() {
    if (process.env.NODE_TLS_REJECT_UNAUTHORIZED === '0') {
      console.warn('\x1b[31m%s\x1b[0m', '‚ö†Ô∏è C·∫¢NH B√ÅO B·∫¢O M·∫¨T: NODE_TLS_REJECT_UNAUTHORIZED=0 ‚ö†Ô∏è');
      console.warn('\x1b[33m%s\x1b[0m', 'C√†i ƒë·∫∑t n√†y l√†m v√¥ hi·ªáu h√≥a x√°c minh ch·ª©ng ch·ªâ SSL/TLS, khi·∫øn t·∫•t c·∫£ k·∫øt n·ªëi HTTPS kh√¥ng an to√†n!');
      console.warn('\x1b[33m%s\x1b[0m', 'ƒêi·ªÅu n√†y ch·ªâ n√™n ƒë∆∞·ª£c s·ª≠ d·ª•ng trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn, KH√îNG BAO GI·ªú trong s·∫£n xu·∫•t.');
      console.warn('\x1b[36m%s\x1b[0m', 'ƒê·ªÉ kh·∫Øc ph·ª•c, h√£y x√≥a bi·∫øn m√¥i tr∆∞·ªùng NODE_TLS_REJECT_UNAUTHORIZED=0 ho·∫∑c s·ª≠ d·ª•ng gi·∫£i ph√°p b·∫£o m·∫≠t h∆°n.');
      console.warn('\x1b[36m%s\x1b[0m', 'N·∫øu b·∫°n ƒëang g·∫∑p v·∫•n ƒë·ªÅ v·ªõi ch·ª©ng ch·ªâ t·ª± k√Ω, h√£y c·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n ch·ª©ng ch·ªâ CA trong thi·∫øt l·∫≠p axios.');
    }
  }
  
  /**
   * T·∫°o c·∫•u h√¨nh Axios v·ªõi x·ª≠ l√Ω ch·ª©ng ch·ªâ ph√π h·ª£p
   */
  createSecureAxiosInstance(baseURL) {
    const options = {
      baseURL: baseURL || 'https://api.x.ai',
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'anthropic-version': '2025-04-15',
        'User-Agent': `Luna/${this.displayModelName}`,
        'Accept': 'application/json'
      }
    };
    
    const certPath = process.env.CUSTOM_CA_CERT_PATH;
    if (certPath && fs.existsSync(certPath)) {
      const ca = fs.readFileSync(certPath);
      options.httpsAgent = new require('https').Agent({ ca });
      console.log(`ƒêang s·ª≠ d·ª•ng ch·ª©ng ch·ªâ CA t√πy ch·ªânh t·ª´: ${certPath}`);
    }
    
    return axios.create(options);
  }

  /**
   * Nh·∫≠n ph·∫£n h·ªìi tr√≤ chuy·ªán t·ª´ API
   */
  async getCompletion(prompt, message = null) {
    try {
      // Tr√≠ch xu·∫•t ID ng∆∞·ªùi d√πng t·ª´ tin nh·∫Øn ho·∫∑c t·∫°o m·ªôt ID cho t∆∞∆°ng t√°c kh√¥ng ph·∫£i Discord
      const userId = message?.author?.id || 'default-user';
      
      // Ki·ªÉm tra xem l·ªùi nh·∫Øc c√≥ ph·∫£i l√† l·ªánh t·∫°o h√¨nh ·∫£nh kh√¥ng (v·ªõi h·ªó tr·ª£ l·ªánh ti·∫øng Vi·ªát m·ªü r·ªông)
      const imageCommandRegex = /^(v·∫Ω|t·∫°o h√¨nh|v·∫Ω h√¨nh|h√¨nh|t·∫°o ·∫£nh ai|t·∫°o ·∫£nh)\s+(.+)$/i;
      const imageMatch = prompt.match(imageCommandRegex);
      
      if (imageMatch) {
        // Tr√≠ch xu·∫•t m√¥ t·∫£ h√¨nh ·∫£nh (b√¢y gi·ªù trong nh√≥m 2)
        const imagePrompt = imageMatch[2];
        const commandUsed = imageMatch[1];
        console.log(`Ph√°t hi·ªán l·ªánh t·∫°o h√¨nh ·∫£nh "${commandUsed}". Prompt: ${imagePrompt}`);
        
        // N·∫øu c√≥ message object (t·ª´ Discord), s·ª≠ d·ª•ng messageHandler
        if (message) {
          // Truy·ªÅn h√†m generateImage ƒë∆∞·ª£c bind v·ªõi this
          return await messageHandler.handleDiscordImageGeneration(
            message, 
            imagePrompt, 
            this.generateImage.bind(this)
          );
        }
        
        // N·∫øu kh√¥ng, t·∫°o h√¨nh ·∫£nh v√† tr·∫£ v·ªÅ URL nh∆∞ th√¥ng th∆∞·ªùng
        return await this.generateImage(imagePrompt);
      }
      
      console.log(`ƒêang g·ª≠i y√™u c·∫ßu chat completion ƒë·∫øn ${this.defaultModel}... (hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng: ${this.displayModelName})`);
      
      // S·ª≠ d·ª•ng Axios v·ªõi c·∫•u h√¨nh b·∫£o m·∫≠t
      const axiosInstance = this.createSecureAxiosInstance('https://api.x.ai');
      
      // Th√™m h∆∞·ªõng d·∫´n c·ª• th·ªÉ v·ªÅ phong c√°ch tr·∫£ l·ªùi
      const enhancedPrompt = `Reply like a smart, sweet, and charming young woman named Luna. Use gentle, friendly language ‚Äî nothing too stiff or robotic. If it fits the context, feel free to sprinkle in light humor or kind encouragement. Avoid sounding too textbook-y or dry. If the user says something interesting, pick up on it naturally to keep the flow going. ${prompt}`;
      
      // Chu·∫©n b·ªã tin nh·∫Øn cho l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
      const userMessage = enhancedPrompt || prompt;
      
      // L·∫•y l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán hi·ªán c√≥
      const conversationHistory = await storageDB.getConversationHistory(userId, this.systemPrompt, this.displayModelName);
      
      // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
      await storageDB.addMessageToConversation(userId, 'user', userMessage);
      
      // T·∫°o m·∫£ng tin nh·∫Øn ho√†n ch·ªânh v·ªõi l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
      const messages = [...conversationHistory];
      
      // Th·ª±c hi·ªán y√™u c·∫ßu API v·ªõi l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
      const response = await axiosInstance.post('/v1/chat/completions', {
        model: this.defaultModel,
        max_tokens: 2048,
        messages: messages
      });
      
      console.log('ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ API');
      let content = response.data.choices[0].message.content;
      
      // Th√™m ph·∫£n h·ªìi c·ªßa tr·ª£ l√Ω v√†o l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
      await storageDB.addMessageToConversation(userId, 'assistant', content);
      
      if (content.toLowerCase().trim() === 'ch√†o b·∫°n' || content.length < 6) {
        content = `Hii~ m√¨nh l√† ${this.displayModelName} v√† m√¨nh ·ªü ƒë√¢y n·∫øu b·∫°n c·∫ßn g√¨ n√® üí¨ C·ª© tho·∫£i m√°i n√≥i chuy·ªán nh∆∞ b·∫°n b√® nha! ${content}`;
      }
      
      // ƒê√¥i khi ch·ªß ƒë·ªông ƒë·ªÅ c·∫≠p t·ªõi phi√™n b·∫£n model (kho·∫£ng 10% c√°c c√¢u tr·∫£ l·ªùi)
      if (Math.random() < 0.1 && content.length < 100) {
        content += ` (M√¨nh l√† ${this.displayModelName} - m·ªôt phi√™n b·∫£n c·ªßa Luna) üíñ`;
        content += ` (Tr·∫£ l·ªùi b·ªüi ${this.displayModelName} üí´)`;
      }
      
      return content;
    } catch (error) {
      console.error(`L·ªói khi g·ªçi X.AI API:`, error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      return `Xin l·ªói, t√¥i kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI. L·ªói: ${error.message}`;
    }
  }
  
  /**
   * Nh·∫≠n ph·∫£n h·ªìi m√£ t·ª´ API
   */
  async getCodeCompletion(prompt) {
    try {
      const codingSystemPrompt = `${this.systemPrompt} B·∫°n c≈©ng l√† tr·ª£ l√Ω l·∫≠p tr√¨nh v·ªõi t√™n m√¥ h√¨nh ${this.displayModelName}. Cung c·∫•p v√≠ d·ª• m√£ v√† gi·∫£i th√≠ch. Lu√¥n ƒë∆∞a ra m√£ trong kh·ªëi code v√† c√≥ comment ƒë·∫ßy ƒë·ªß.`;
      
      // S·ª≠ d·ª•ng Axios v·ªõi c·∫•u h√¨nh b·∫£o m·∫≠t
      const axiosInstance = this.createSecureAxiosInstance('https://api.x.ai');
      
      const response = await axiosInstance.post('/v1/chat/completions', {
        model: this.defaultModel,
        max_tokens: 4096,
        messages: [
          { role: 'system', content: codingSystemPrompt },
          { role: 'user', content: prompt }
        ]
      });
      
      return response.data.choices[0].message.content;
    } catch (error) {
      console.error(`L·ªói khi g·ªçi X.AI API cho m√£:`, error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      return `Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o m√£ do l·ªói k·∫øt n·ªëi. L·ªói: ${error.message}`;
    }
  }
  
  /**
   * T·∫°o h√¨nh ·∫£nh s·ª≠ d·ª•ng API v·ªõi m√¥ h√¨nh ri√™ng
   */
  async generateImage(prompt) {
    try {
      console.log(`ƒêang t·∫°o h√¨nh ·∫£nh v·ªõi m√¥ h√¨nh ${this.imageModel}...`);
      
      // S·ª≠ d·ª•ng Axios v·ªõi c·∫•u h√¨nh b·∫£o m·∫≠t
      const axiosInstance = this.createSecureAxiosInstance('https://api.x.ai');
      
      const response = await axiosInstance.post('/v1/images/generations', {
        model: this.imageModel,
        prompt: prompt,
        n: 1
      });
      
      console.log('ƒê√£ nh·∫≠n h√¨nh ·∫£nh t·ª´ API');
      return response.data.data[0].url;
    } catch (error) {
      console.error('L·ªói khi t·∫°o h√¨nh ·∫£nh:', error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      
      if (error.response && 
          error.response.data && 
          error.response.data.error &&
          error.response.data.error.includes("Generated image rejected by content moderation")) {
        return "Xin l·ªói, m√¨nh kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh n√†y. N·ªôi dung b·∫°n y√™u c·∫ßu kh√¥ng tu√¢n th·ªß nguy√™n t·∫Øc ki·ªÉm duy·ªát n·ªôi dung. Vui l√≤ng th·ª≠ ch·ªß ƒë·ªÅ ho·∫∑c m√¥ t·∫£ kh√°c.";
      }
      
      return `Xin l·ªói, kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh: ${error.message}`;
    }
  }
  
  /**
   * Ki·ªÉm tra k·∫øt n·ªëi API
   */
  async testConnection() {
    try {
      console.log(`ƒêang ki·ªÉm tra k·∫øt n·ªëi t·ªõi X.AI API...`);
      
      // S·ª≠ d·ª•ng Axios v·ªõi c·∫•u h√¨nh b·∫£o m·∫≠t
      const axiosInstance = this.createSecureAxiosInstance('https://api.x.ai');
      const response = await axiosInstance.get('/v1/models');
      
      console.log('K·∫øt n·ªëi th√†nh c√¥ng v·ªõi X.AI API!');
      if (response.data && response.data.data) {
        console.log(`ƒêang s·ª≠ d·ª•ng model API: ${this.defaultModel}`);
        console.log(`Hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng: ${this.displayModelName}`);
      }
      
      return true;
    } catch (error) {
      console.error(`Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi X.AI API:`, error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      return false;
    }
  }

  /**
   * X·ª≠ l√Ω tin nh·∫Øn Discord
   * @param {Discord.Message} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
   * @returns {Object} - Th√¥ng tin v·ªÅ n·ªôi dung ƒë√£ x·ª≠ l√Ω
   */
  async processDiscordMessage(message) {
    try {
      const originalContent = message.content;
      console.log("N·ªôi dung g·ªëc c·ªßa tin nh·∫Øn Discord:", originalContent);
      
      let cleanContent = message.cleanContent || originalContent;
      console.log("N·ªôi dung ƒë√£ x·ª≠ l√Ω c·ªßa tin nh·∫Øn Discord:", cleanContent);
      
      return {
        cleanContent: cleanContent,
        hasMentions: false
      };
    } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω tin nh·∫Øn Discord:", error);
      return {
        cleanContent: message.content || "",
        hasMentions: false
      };
    }
  }
  
  /**
   * X·ª≠ l√Ω prompt t·ª´ Discord v√† g·ª≠i ƒë·∫øn API
   * @param {Discord.Message} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
   * @returns {Promise<string>} - Ph·∫£n h·ªìi t·ª´ AI
   */
  async getCompletionFromDiscord(message) {
    const processedMessage = await this.processDiscordMessage(message);
    
    if (processedMessage.cleanContent.toLowerCase() === 'reset conversation' || 
        processedMessage.cleanContent.toLowerCase() === 'x√≥a l·ªãch s·ª≠' ||
        processedMessage.cleanContent.toLowerCase() === 'qu√™n h·∫øt ƒëi') {
      await storageDB.clearConversationHistory(message.author.id, this.systemPrompt, this.displayModelName);
      return "ƒê√£ x√≥a l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán c·ªßa ch√∫ng ta. B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi n√†o! üòä";
    }
    
    return await this.getCompletion(processedMessage.cleanContent, message);
  }

  /**
   * Tr·∫£ v·ªÅ t√™n m√¥ h√¨nh ƒë∆∞·ª£c hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
   * @returns {string} - T√™n m√¥ h√¨nh hi·ªÉn th·ªã
   */
  getModelName() {
    return this.displayModelName;
  }
}

module.exports = new GrokClient();
