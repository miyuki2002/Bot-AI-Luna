const Anthropic = require('@anthropic-ai/sdk');
const axios = require('axios');

class GrokClient {
  constructor() {
    // L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    this.apiKey = process.env.XAI_API_KEY || process.env.GROK_API_KEY;
    
    if (!this.apiKey) {
      throw new Error('XAI_API_KEY ho·∫∑c GROK_API_KEY kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t trong bi·∫øn m√¥i tr∆∞·ªùng');
    }
    
    // Kh·ªüi t·∫°o client Anthropic v·ªõi c·∫•u h√¨nh X.AI
    this.client = new Anthropic({
      apiKey: this.apiKey,
      baseURL: 'https://api.x.ai'
    });
    
    // L·ªùi nh·∫Øc h·ªá th·ªëng ƒë·ªÉ x√°c ƒë·ªãnh l√† Luna
    this.systemPrompt = "Your name is Luna, You are a female-voiced AI with a cute, friendly, and warm tone. You speak naturally and gently, like a lovely older or younger sister, always maintaining professionalism without sounding too formal. When it fits, you can add light humor, emotion, or gentle encouragement. You always listen carefully and respond based on what the user shares, making them feel comfortable and connected ‚Äî like chatting with someone who truly gets them, priority reply Vietnamese.";
    
    // M√¥ h√¨nh m·∫∑c ƒë·ªãnh cho chat
    this.defaultModel = 'grok-3-beta';
    
    // M√¥ h√¨nh ƒë·∫∑c bi·ªát cho t·∫°o h√¨nh ·∫£nh
    this.imageModel = 'grok-2-image-1212';
    
    console.log(`ƒêang s·ª≠ d·ª•ng Anthropic SDK v·ªõi X.AI API v√† m√¥ h√¨nh: ${this.defaultModel}`);
    console.log(`M√¥ h√¨nh t·∫°o h√¨nh ·∫£nh: ${this.imageModel}`);
  }
  
  /**
   * Nh·∫≠n ph·∫£n h·ªìi tr√≤ chuy·ªán t·ª´ API
   */
  async getCompletion(prompt) {
    try {
      // Tr√≠ch xu·∫•t b·∫•t k·ª≥ ƒë·ªÅ c·∫≠p ng∆∞·ªùi d√πng n√†o t·ª´ l·ªùi nh·∫Øc
      const mentions = this.extractMentions(prompt);
      if (mentions.length > 0) {
        console.log(`Detected mentions in message: ${mentions.join(', ')}`);
        // X√≥a c√°c ƒë·ªÅ c·∫≠p ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n trong qu√° tr√¨nh x·ª≠ l√Ω AI
        prompt = this.removeMentions(prompt);
      }
      
      // Ki·ªÉm tra xem l·ªùi nh·∫Øc c√≥ ph·∫£i l√† l·ªánh t·∫°o h√¨nh ·∫£nh kh√¥ng (v·ªõi h·ªó tr·ª£ l·ªánh ti·∫øng Vi·ªát m·ªü r·ªông)
      const imageCommandRegex = /^(\/image|v·∫Ω|t·∫°o h√¨nh|v·∫Ω h√¨nh|h√¨nh)\s+(.+)$/i;
      const imageMatch = prompt.match(imageCommandRegex);
      
      if (imageMatch) {
        // Tr√≠ch xu·∫•t m√¥ t·∫£ h√¨nh ·∫£nh (b√¢y gi·ªù trong nh√≥m 2)
        const imagePrompt = imageMatch[2];
        const commandUsed = imageMatch[1];
        console.log(`Detected image generation command "${commandUsed}". Prompt: ${imagePrompt}`);
        
        // T·∫°o h√¨nh ·∫£nh v√† tr·∫£ v·ªÅ tr·ª±c ti·∫øp URL
        return await this.generateImage(imagePrompt);
      }
      
      console.log(`ƒêang g·ª≠i y√™u c·∫ßu chat completion ƒë·∫øn ${this.defaultModel}...`);
      
      // S·ª≠ d·ª•ng Axios tr·ª±c ti·∫øp thay v√¨ SDK ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng tin nh·∫Øn ch√≠nh x√°c
      const axiosInstance = axios.create({
        baseURL: 'https://api.x.ai',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
          'anthropic-version': '2023-06-01'
        }
      });
      
      // Th√™m h∆∞·ªõng d·∫´n c·ª• th·ªÉ v·ªÅ phong c√°ch tr·∫£ l·ªùi
      const enhancedPrompt = `Reply like a smart, sweet, and charming young woman. Use gentle, friendly language ‚Äî nothing too stiff or robotic. If it fits the context, feel free to sprinkle in light humor or kind encouragement. Avoid sounding too textbook-y or dry. If the user says something interesting, pick up on it naturally to keep the flow going. ${prompt}`;
      
      const response = await axiosInstance.post('/v1/chat/completions', {
        model: this.defaultModel,
        max_tokens: 2048,
        messages: [
          { role: 'system', content: this.systemPrompt },
          { role: 'user', content: enhancedPrompt }
        ]
      });
      
      console.log('ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ API');
      let content = response.data.choices[0].message.content;
      
      
      if (content.toLowerCase().trim() === 'ch√†o b·∫°n' || content.length < 4) {
        content = `Hii~ m√¨nh ·ªü ƒë√¢y n·∫øu b·∫°n c·∫ßn g√¨ n√® üí¨ C·ª© tho·∫£i m√°i n√≥i chuy·ªán nh∆∞ b·∫°n b√® nha! ${content}`;
      }
      
      return content;
    } catch (error) {
      console.error(`L·ªói khi g·ªçi X.AI API:`, error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      return `Xin l·ªói, t√¥i kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI. L·ªói: ${error.message}`;
    }
  }
  
  /**
   * Tr√≠ch xu·∫•t ƒë·ªÅ c·∫≠p @username t·ª´ vƒÉn b·∫£n
   * @param {string} text - VƒÉn b·∫£n ƒë·∫ßu v√†o ƒë·ªÉ tr√≠ch xu·∫•t ƒë·ªÅ c·∫≠p
   * @returns {Array} - M·∫£ng t√™n ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
   */
  extractMentions(text) {
    const mentionRegex = /@(\w+)/g;
    const matches = text.match(mentionRegex);
    
    if (!matches) return [];
    
    // X√≥a k√Ω hi·ªáu @ v√† tr·∫£ v·ªÅ ch·ªâ t√™n ng∆∞·ªùi d√πng
    return matches.map(mention => mention.substring(1));
  }
  
  /**
   * X√≥a ƒë·ªÅ c·∫≠p @username kh·ªèi vƒÉn b·∫£n
   * @param {string} text - VƒÉn b·∫£n ƒë·∫ßu v√†o ƒë·ªÉ x√≥a ƒë·ªÅ c·∫≠p
   * @returns {string} - VƒÉn b·∫£n ƒë√£ x√≥a ƒë·ªÅ c·∫≠p
   */
  removeMentions(text) {
    return text.replace(/@\w+\s?/g, '').trim();
  }
  
  /**
   * Nh·∫≠n ph·∫£n h·ªìi m√£ t·ª´ API
   */
  async getCodeCompletion(prompt) {
    try {
      const codingSystemPrompt = `${this.systemPrompt} B·∫°n c≈©ng l√† tr·ª£ l√Ω l·∫≠p tr√¨nh. Cung c·∫•p v√≠ d·ª• m√£ v√† gi·∫£i th√≠ch. Lu√¥n ƒë∆∞a ra m√£ trong kh·ªëi code v√† c√≥ comment ƒë·∫ßy ƒë·ªß.`;
      
      const axiosInstance = axios.create({
        baseURL: 'https://api.x.ai',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
          'anthropic-version': '2023-06-01'
        }
      });
      
      const response = await axiosInstance.post('/v1/chat/completions', {
        model: this.defaultModel,
        max_tokens: 4096,
        messages: [
          { role: 'system', content: codingSystemPrompt },
          { role: 'user', content: prompt }
        ]
      });
      
      return response.data.choices[0].message.content;
    } catch (error) {
      console.error(`L·ªói khi g·ªçi X.AI API cho m√£:`, error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      return `Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o m√£ do l·ªói k·∫øt n·ªëi. L·ªói: ${error.message}`;
    }
  }
  
  /**
   * T·∫°o h√¨nh ·∫£nh s·ª≠ d·ª•ng API v·ªõi m√¥ h√¨nh ri√™ng
   */
  async generateImage(prompt) {
    try {
      console.log(`ƒêang t·∫°o h√¨nh ·∫£nh v·ªõi m√¥ h√¨nh ${this.imageModel}...`);
      
      const axiosInstance = axios.create({
        baseURL: 'https://api.x.ai',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });
      
      const response = await axiosInstance.post('/v1/images/generations', {
        model: this.imageModel,
        prompt: prompt,
        n: 1
      });
      
      console.log('ƒê√£ nh·∫≠n h√¨nh ·∫£nh t·ª´ API');
      return response.data.data[0].url;
    } catch (error) {
      console.error('L·ªói khi t·∫°o h√¨nh ·∫£nh:', error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      
      // Ki·ªÉm tra c·ª• th·ªÉ vi·ªác t·ª´ ch·ªëi ki·ªÉm duy·ªát n·ªôi dung
      if (error.response && 
          error.response.data && 
          error.response.data.error &&
          error.response.data.error.includes("Generated image rejected by content moderation")) {
        return "Xin l·ªói, m√¨nh kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh n√†y. N·ªôi dung b·∫°n y√™u c·∫ßu kh√¥ng tu√¢n th·ªß nguy√™n t·∫Øc ki·ªÉm duy·ªát n·ªôi dung. Vui l√≤ng th·ª≠ ch·ªß ƒë·ªÅ ho·∫∑c m√¥ t·∫£ kh√°c.";
      }
      
      // ƒê·ªëi v·ªõi c√°c l·ªói kh√°c, ch·ªâ tr·∫£ v·ªÅ th√¥ng b√°o l·ªói thay v√¨ n√©m l·ªói
      return `Xin l·ªói, kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh: ${error.message}`;
    }
  }
  
  /**
   * Ki·ªÉm tra k·∫øt n·ªëi API
   */
  async testConnection() {
    try {
      console.log(`ƒêang ki·ªÉm tra k·∫øt n·ªëi t·ªõi X.AI API...`);
      
      const axiosInstance = axios.create({
        baseURL: 'https://api.x.ai',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });
      
      // Th·ª≠ l·∫•y danh s√°ch models
      const response = await axiosInstance.get('/v1/models');
      
      console.log('K·∫øt n·ªëi th√†nh c√¥ng v·ªõi X.AI API!');
      if (response.data && response.data.data) {
        const models = response.data.data.map(m => m.id).join(', ');
        console.log('C√°c model c√≥ s·∫µn:', models);
      }
      
      return true;
    } catch (error) {
      console.error(`Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi X.AI API:`, error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      return false;
    }
  }
}

module.exports = new GrokClient();
