const Anthropic = require('@anthropic-ai/sdk');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

class GrokClient {
  constructor() {
    // Ki·ªÉm tra c√†i ƒë·∫∑t TLS kh√¥ng an to√†n v√† c·∫£nh b√°o
    this.checkTLSSecurity();
    
    // L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    this.apiKey = process.env.XAI_API_KEY;
    
    if (!this.apiKey) {
      throw new Error('XAI_API_KEY kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t trong bi·∫øn m√¥i tr∆∞·ªùng');
    }
    
    // Kh·ªüi t·∫°o client Anthropic v·ªõi c·∫•u h√¨nh X.AI
    this.client = new Anthropic({
      apiKey: this.apiKey,
      baseURL: 'https://api.x.ai'
    });
    
    // L·ªùi nh·∫Øc h·ªá th·ªëng ƒë·ªÉ x√°c ƒë·ªãnh l√† Luna
    this.systemPrompt = "Your name is Luna, You are a female-voiced AI with a cute, friendly, and warm tone. You speak naturally and gently, like a lovely older or younger sister, always maintaining professionalism without sounding too formal. When it fits, you can add light humor, emotion, or gentle encouragement. You always listen carefully and respond based on what the user shares, making them feel comfortable and connected ‚Äî like chatting with someone who truly gets them, priority reply Vietnamese.";
    
    // M√¥ h√¨nh m·∫∑c ƒë·ªãnh cho chat
    this.defaultModel = 'grok-3-beta';
    
    // M√¥ h√¨nh ƒë·∫∑c bi·ªát cho t·∫°o h√¨nh ·∫£nh
    this.imageModel = 'grok-2-image-1212';
    
    console.log(`ƒêang s·ª≠ d·ª•ng Anthropic SDK v·ªõi X.AI API v√† m√¥ h√¨nh: ${this.defaultModel}`);
    console.log(`M√¥ h√¨nh t·∫°o h√¨nh ·∫£nh: ${this.imageModel}`);
  }
  
  /**
   * Ki·ªÉm tra c√†i ƒë·∫∑t b·∫£o m·∫≠t TLS
   */
  checkTLSSecurity() {
    if (process.env.NODE_TLS_REJECT_UNAUTHORIZED === '0') {
      console.warn('\x1b[31m%s\x1b[0m', '‚ö†Ô∏è C·∫¢NH B√ÅO B·∫¢O M·∫¨T: NODE_TLS_REJECT_UNAUTHORIZED=0 ‚ö†Ô∏è');
      console.warn('\x1b[33m%s\x1b[0m', 'C√†i ƒë·∫∑t n√†y l√†m v√¥ hi·ªáu h√≥a x√°c minh ch·ª©ng ch·ªâ SSL/TLS, khi·∫øn t·∫•t c·∫£ k·∫øt n·ªëi HTTPS kh√¥ng an to√†n!');
      console.warn('\x1b[33m%s\x1b[0m', 'ƒêi·ªÅu n√†y ch·ªâ n√™n ƒë∆∞·ª£c s·ª≠ d·ª•ng trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn, KH√îNG BAO GI·ªú trong s·∫£n xu·∫•t.');
      console.warn('\x1b[36m%s\x1b[0m', 'ƒê·ªÉ kh·∫Øc ph·ª•c, h√£y x√≥a bi·∫øn m√¥i tr∆∞·ªùng NODE_TLS_REJECT_UNAUTHORIZED=0 ho·∫∑c s·ª≠ d·ª•ng gi·∫£i ph√°p b·∫£o m·∫≠t h∆°n.');
      console.warn('\x1b[36m%s\x1b[0m', 'N·∫øu b·∫°n ƒëang g·∫∑p v·∫•n ƒë·ªÅ v·ªõi ch·ª©ng ch·ªâ t·ª± k√Ω, h√£y c·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n ch·ª©ng ch·ªâ CA trong thi·∫øt l·∫≠p axios.');
    }
  }
  
  /**
   * T·∫°o c·∫•u h√¨nh Axios v·ªõi x·ª≠ l√Ω ch·ª©ng ch·ªâ ph√π h·ª£p
   */
  createSecureAxiosInstance(baseURL) {
    const options = {
      baseURL: baseURL || 'https://api.x.ai',
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json'
      }
    };
    
    // N·∫øu c√≥ ƒë∆∞·ªùng d·∫´n ch·ª©ng ch·ªâ CA t√πy ch·ªânh (cho m√¥i tr∆∞·ªùng ph√°t tri·ªÉn v·ªõi ch·ª©ng ch·ªâ t·ª± k√Ω)
    const certPath = process.env.CUSTOM_CA_CERT_PATH;
    if (certPath && fs.existsSync(certPath)) {
      const ca = fs.readFileSync(certPath);
      options.httpsAgent = new require('https').Agent({ ca });
      console.log(`ƒêang s·ª≠ d·ª•ng ch·ª©ng ch·ªâ CA t√πy ch·ªânh t·ª´: ${certPath}`);
    }
    
    return axios.create(options);
  }

  /**
   * Nh·∫≠n ph·∫£n h·ªìi tr√≤ chuy·ªán t·ª´ API
   */
  async getCompletion(prompt, message = null) {
    try {
      // Tr√≠ch xu·∫•t b·∫•t k·ª≥ ƒë·ªÅ c·∫≠p ng∆∞·ªùi d√πng n√†o t·ª´ l·ªùi nh·∫Øc
      const mentions = this.extractMentions(prompt);
      if (mentions.length > 0) {
        console.log(`Ph√°t hi·ªán ƒë·ªÅ c·∫≠p trong tin nh·∫Øn: ${mentions.join(', ')}`);
        // X√≥a c√°c ƒë·ªÅ c·∫≠p ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n trong qu√° tr√¨nh x·ª≠ l√Ω AI
        const originalPrompt = prompt;
        prompt = this.removeMentions(prompt);
        console.log(`Tin nh·∫Øn tr∆∞·ªõc: "${originalPrompt}"`);
        console.log(`Tin nh·∫Øn sau khi lo·∫°i b·ªè ƒë·ªÅ c·∫≠p: "${prompt}"`);
      }
      
      // Ki·ªÉm tra xem l·ªùi nh·∫Øc c√≥ ph·∫£i l√† l·ªánh t·∫°o h√¨nh ·∫£nh kh√¥ng (v·ªõi h·ªó tr·ª£ l·ªánh ti·∫øng Vi·ªát m·ªü r·ªông)
      const imageCommandRegex = /^(\/image|v·∫Ω|t·∫°o h√¨nh|v·∫Ω h√¨nh|h√¨nh)\s+(.+)$/i;
      const imageMatch = prompt.match(imageCommandRegex);
      
      if (imageMatch) {
        // Tr√≠ch xu·∫•t m√¥ t·∫£ h√¨nh ·∫£nh (b√¢y gi·ªù trong nh√≥m 2)
        const imagePrompt = imageMatch[2];
        const commandUsed = imageMatch[1];
        console.log(`Detected image generation command "${commandUsed}". Prompt: ${imagePrompt}`);
        
        // N·∫øu c√≥ message object (t·ª´ Discord), x·ª≠ l√Ω b·∫±ng Discord handler
        if (message) {
          return await this.handleDiscordImageGeneration(message, imagePrompt);
        }
        
        // N·∫øu kh√¥ng, t·∫°o h√¨nh ·∫£nh v√† tr·∫£ v·ªÅ URL nh∆∞ th√¥ng th∆∞·ªùng
        return await this.generateImage(imagePrompt);
      }
      
      console.log(`ƒêang g·ª≠i y√™u c·∫ßu chat completion ƒë·∫øn ${this.defaultModel}...`);
      
      // S·ª≠ d·ª•ng Axios v·ªõi c·∫•u h√¨nh b·∫£o m·∫≠t
      const axiosInstance = this.createSecureAxiosInstance('https://api.x.ai');
      axiosInstance.defaults.headers['anthropic-version'] = '2025-04-15';
      
      // Th√™m h∆∞·ªõng d·∫´n c·ª• th·ªÉ v·ªÅ phong c√°ch tr·∫£ l·ªùi
      const enhancedPrompt = `Reply like a smart, sweet, and charming young woman. Use gentle, friendly language ‚Äî nothing too stiff or robotic. If it fits the context, feel free to sprinkle in light humor or kind encouragement. Avoid sounding too textbook-y or dry. If the user says something interesting, pick up on it naturally to keep the flow going. ${prompt}`;
      
      const response = await axiosInstance.post('/v1/chat/completions', {
        model: this.defaultModel,
        max_tokens: 2048,
        messages: [
          { role: 'system', content: this.systemPrompt },
          { role: 'user', content: enhancedPrompt }
        ]
      });
      
      console.log('ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ API');
      let content = response.data.choices[0].message.content;
      
      
      if (content.toLowerCase().trim() === 'ch√†o b·∫°n' || content.length < 4) {
        content = `Hii~ m√¨nh ·ªü ƒë√¢y n·∫øu b·∫°n c·∫ßn g√¨ n√® üí¨ C·ª© tho·∫£i m√°i n√≥i chuy·ªán nh∆∞ b·∫°n b√® nha! ${content}`;
      }
      
      return content;
    } catch (error) {
      console.error(`L·ªói khi g·ªçi X.AI API:`, error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      return `Xin l·ªói, t√¥i kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI. L·ªói: ${error.message}`;
    }
  }
  
  /**
   * X·ª≠ l√Ω y√™u c·∫ßu t·∫°o h√¨nh ·∫£nh t·ª´ Discord
   * @param {Discord.Message} message - Tin nh·∫Øn Discord
   * @param {string} prompt - M√¥ t·∫£ h√¨nh ·∫£nh c·∫ßn t·∫°o
   * @returns {Promise<string>} - Th√¥ng b√°o x√°c nh·∫≠n
   */
  async handleDiscordImageGeneration(message, prompt) {
    try {
      if (!prompt) {
        return "Vui l√≤ng cung c·∫•p m√¥ t·∫£ cho h√¨nh ·∫£nh b·∫°n mu·ªën t√¥i t·∫°o.";
      }
      
      // Import messageHandler theo c√°ch tr√°nh circular dependency
      const { EmbedBuilder } = require('discord.js');
      
      // Th√¥ng b√°o ƒëang x·ª≠ l√Ω
      await message.channel.sendTyping();
      
      // T·∫°o h√¨nh ·∫£nh s·ª≠ d·ª•ng API
      const imageUrl = await this.generateImage(prompt);
      
      // N·∫øu nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o l·ªói thay v√¨ URL, tr·∫£ v·ªÅ th√¥ng b√°o ƒë√≥
      if (imageUrl.startsWith('Xin l·ªói')) {
        await message.reply(imageUrl);
        return imageUrl;
      }
      
      // T·∫°o embed v√† g·ª≠i tr·∫£ l·ªùi
      const embed = new EmbedBuilder()
        .setTitle('H√¨nh ·∫¢nh ƒê∆∞·ª£c T·∫°o')
        .setDescription(`M√¥ t·∫£: ${prompt}`)
        .setImage(imageUrl)
        .setColor('#0099ff')
        .setTimestamp();
        
      await message.reply({ embeds: [embed] });
      
      // Tr·∫£ v·ªÅ th√¥ng b√°o x√°c nh·∫≠n ƒë·ªÉ ph∆∞∆°ng th·ª©c g·ªçi bi·∫øt x·ª≠ l√Ω th√†nh c√¥ng
      return "ƒê√£ t·∫°o v√† g·ª≠i h√¨nh ·∫£nh th√†nh c√¥ng!";
    } catch (error) {
      console.error('L·ªói khi t·∫°o h√¨nh ·∫£nh cho Discord:', error);
      
      if (message) {
        await message.reply('Xin l·ªói, t√¥i g·∫∑p kh√≥ khƒÉn khi t·∫°o h√¨nh ·∫£nh ƒë√≥.');
      }
      
      return `Xin l·ªói, kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh: ${error.message}`;
    }
  }
  
  /**
   * Tr√≠ch xu·∫•t ƒë·ªÅ c·∫≠p @username t·ª´ vƒÉn b·∫£n
   * @param {string} text - VƒÉn b·∫£n ƒë·∫ßu v√†o ƒë·ªÉ tr√≠ch xu·∫•t ƒë·ªÅ c·∫≠p
   * @returns {Array} - M·∫£ng t√™n ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
   */
  extractMentions(text) {
    if (!text) {
      return [];
    }
    
    // M·ªü r·ªông regex ƒë·ªÉ ph√°t hi·ªán nhi·ªÅu lo·∫°i ƒë·ªÅ c·∫≠p kh√°c nhau
    // Bao g·ªìm c√°c ƒë·ªãnh d·∫°ng ph·ªï bi·∫øn t·ª´ nhi·ªÅu n·ªÅn t·∫£ng
    const patterns = [
      /@([\w.-]+)/g,                 // ƒê·ªãnh d·∫°ng c∆° b·∫£n: @username
      /@"([^"]+)"/g,                 // ƒê·ªãnh d·∫°ng c√≥ d·∫•u ngo·∫∑c k√©p: @"User Name"
      /@'([^']+)'/g,                 // ƒê·ªãnh d·∫°ng c√≥ d·∫•u ngo·∫∑c ƒë∆°n: @'User Name'
      /<@!?(\d+)>/g,                 // ƒê·ªãnh d·∫°ng Discord: <@123456789>
      /\[(@[^\]]+)\]/g,              // ƒê·ªãnh d·∫°ng c√≥ ngo·∫∑c vu√¥ng: [@username]
      /@(\S+)/g                      // B·∫Øt b·∫•t k·ª≥ chu·ªói kh√¥ng kho·∫£ng tr·∫Øng n√†o theo sau @ 
    ];
    
    const matches = [];
    
    // Ki·ªÉm tra t·ª´ng pattern v√† thu th·∫≠p k·∫øt qu·∫£
    patterns.forEach(pattern => {
      let match;
      const patternCopy = new RegExp(pattern.source, pattern.flags);
      
      while ((match = patternCopy.exec(text)) !== null) {
        matches.push(match[1]);
      }
    });
    
    return [...new Set(matches)]; // Remove duplicates
  }

  /**
   * X√≥a ƒë·ªÅ c·∫≠p @username kh·ªèi vƒÉn b·∫£n
   * @param {string} text - VƒÉn b·∫£n ƒë·∫ßu v√†o ƒë·ªÉ x√≥a ƒë·ªÅ c·∫≠p
   * @returns {string} - VƒÉn b·∫£n ƒë√£ x√≥a ƒë·ªÅ c·∫≠p
   */
  
  /**
   * Nh·∫≠n ph·∫£n h·ªìi m√£ t·ª´ API
   */
  async getCodeCompletion(prompt) {
    try {
      const codingSystemPrompt = `${this.systemPrompt} B·∫°n c≈©ng l√† tr·ª£ l√Ω l·∫≠p tr√¨nh. Cung c·∫•p v√≠ d·ª• m√£ v√† gi·∫£i th√≠ch. Lu√¥n ƒë∆∞a ra m√£ trong kh·ªëi code v√† c√≥ comment ƒë·∫ßy ƒë·ªß.`;
      
      // S·ª≠ d·ª•ng Axios v·ªõi c·∫•u h√¨nh b·∫£o m·∫≠t
      const axiosInstance = this.createSecureAxiosInstance('https://api.x.ai');
      axiosInstance.defaults.headers['anthropic-version'] = '2025-04-15';
      
      const response = await axiosInstance.post('/v1/chat/completions', {
        model: this.defaultModel,
        max_tokens: 4096,
        messages: [
          { role: 'system', content: codingSystemPrompt },
          { role: 'user', content: prompt }
        ]
      });
      
      return response.data.choices[0].message.content;
    } catch (error) {
      console.error(`L·ªói khi g·ªçi X.AI API cho m√£:`, error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      return `Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o m√£ do l·ªói k·∫øt n·ªëi. L·ªói: ${error.message}`;
    }
  }
  
  /**
   * T·∫°o h√¨nh ·∫£nh s·ª≠ d·ª•ng API v·ªõi m√¥ h√¨nh ri√™ng
   */
  async generateImage(prompt) {
    try {
      console.log(`ƒêang t·∫°o h√¨nh ·∫£nh v·ªõi m√¥ h√¨nh ${this.imageModel}...`);
      
      // S·ª≠ d·ª•ng Axios v·ªõi c·∫•u h√¨nh b·∫£o m·∫≠t
      const axiosInstance = this.createSecureAxiosInstance('https://api.x.ai');
      
      const response = await axiosInstance.post('/v1/images/generations', {
        model: this.imageModel,
        prompt: prompt,
        n: 1
      });
      
      console.log('ƒê√£ nh·∫≠n h√¨nh ·∫£nh t·ª´ API');
      return response.data.data[0].url;
    } catch (error) {
      console.error('L·ªói khi t·∫°o h√¨nh ·∫£nh:', error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      
      // Ki·ªÉm tra c·ª• th·ªÉ vi·ªác t·ª´ ch·ªëi ki·ªÉm duy·ªát n·ªôi dung
      if (error.response && 
          error.response.data && 
          error.response.data.error &&
          error.response.data.error.includes("Generated image rejected by content moderation")) {
        return "Xin l·ªói, m√¨nh kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh n√†y. N·ªôi dung b·∫°n y√™u c·∫ßu kh√¥ng tu√¢n th·ªß nguy√™n t·∫Øc ki·ªÉm duy·ªát n·ªôi dung. Vui l√≤ng th·ª≠ ch·ªß ƒë·ªÅ ho·∫∑c m√¥ t·∫£ kh√°c.";
      }
      
      // ƒê·ªëi v·ªõi c√°c l·ªói kh√°c, ch·ªâ tr·∫£ v·ªÅ th√¥ng b√°o l·ªói thay v√¨ n√©m l·ªói
      return `Xin l·ªói, kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh: ${error.message}`;
    }
  }
  
  /**
   * Ki·ªÉm tra k·∫øt n·ªëi API
   */
  async testConnection() {
    try {
      console.log(`ƒêang ki·ªÉm tra k·∫øt n·ªëi t·ªõi X.AI API...`);
      
      // S·ª≠ d·ª•ng Axios v·ªõi c·∫•u h√¨nh b·∫£o m·∫≠t
      const axiosInstance = this.createSecureAxiosInstance('https://api.x.ai');
      
      // Th·ª≠ l·∫•y danh s√°ch models
      const response = await axiosInstance.get('/v1/models');
      
      console.log('K·∫øt n·ªëi th√†nh c√¥ng v·ªõi X.AI API!');
      if (response.data && response.data.data) {
        const models = response.data.data.map(m => m.id).join(', ');
        console.log('C√°c model c√≥ s·∫µn:', models);
      }
      
      return true;
    } catch (error) {
      console.error(`Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi X.AI API:`, error.message);
      if (error.response) {
        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(error.response.data, null, 2));
      }
      return false;
    }
  }

  /**
   * X·ª≠ l√Ω ƒë·ªÅ c·∫≠p t·ª´ tin nh·∫Øn Discord
   * @param {Discord.Message} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
   * @returns {Object} - Th√¥ng tin v·ªÅ ƒë·ªÅ c·∫≠p v√† n·ªôi dung ƒë√£ x·ª≠ l√Ω
   */
  async processDiscordMessage(message) {
    try {
      // L·∫•y n·ªôi dung g·ªëc c·ªßa tin nh·∫Øn
      const originalContent = message.content;
      console.log("Discord message original content:", originalContent);
      
      // Thu th·∫≠p th√¥ng tin ƒë·ªÅ c·∫≠p s·ª≠ d·ª•ng Discord.js API
      const mentionedUsers = Array.from(message.mentions.users.values());
      const mentionedRoles = Array.from(message.mentions.roles.values());
      const mentionedChannels = Array.from(message.mentions.channels.values());
      
      // Log th√¥ng tin ƒë·ªÅ c·∫≠p
      if (mentionedUsers.length > 0) {
        console.log(`Discord mentions - Users: ${mentionedUsers.map(u => u.username).join(', ')}`);
      }
      if (mentionedRoles.length > 0) {
        console.log(`Discord mentions - Roles: ${mentionedRoles.map(r => r.name).join(', ')}`);
      }
      if (mentionedChannels.length > 0) {
        console.log(`Discord mentions - Channels: ${mentionedChannels.map(c => c.name).join(', ')}`);
      }
      
      // X√≥a ƒë·ªÅ c·∫≠p s·ª≠ d·ª•ng Discord.js cleanContent
      let cleanContent = message.cleanContent;
      
      // N·∫øu cleanContent kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng, th·ªß c√¥ng thay th·∫ø c√°c ƒë·ªãnh d·∫°ng ƒë·ªÅ c·∫≠p c·ªßa Discord
      if (cleanContent.includes('<@') || cleanContent.includes('<#') || cleanContent.includes('<@&')) {
        cleanContent = originalContent
          .replace(/<@!?(\d+)>/g, '') // X√≥a user mentions
          .replace(/<#(\d+)>/g, '')   // X√≥a channel mentions
          .replace(/<@&(\d+)>/g, '')  // X√≥a role mentions
          .trim();
      }
      
      console.log("Discord message clean content:", cleanContent);
      
      // T·∫°o danh s√°ch t√™n ƒë·ªÅ c·∫≠p ƒë·ªÉ tr·∫£ v·ªÅ
      const mentions = [
        ...mentionedUsers.map(user => user.username),
        ...mentionedRoles.map(role => `role:${role.name}`),
        ...mentionedChannels.map(channel => `channel:${channel.name}`)
      ];
      
      // Tr·∫£ v·ªÅ c·∫£ danh s√°ch ƒë·ªÅ c·∫≠p v√† n·ªôi dung ƒë√£ l√†m s·∫°ch
      return {
        mentions: mentions,
        cleanContent: cleanContent,
        hasMentions: mentions.length > 0
      };
    } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω tin nh·∫Øn Discord:", error);
      // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
      return {
        mentions: [],
        cleanContent: message.content || "",
        hasMentions: false
      };
    }
  }
  
  /**
   * X·ª≠ l√Ω prompt t·ª´ Discord v√† g·ª≠i ƒë·∫øn API
   * @param {Discord.Message} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
   * @returns {Promise<string>} - Ph·∫£n h·ªìi t·ª´ AI
   */
  async getCompletionFromDiscord(message) {
    // X·ª≠ l√Ω ƒë·ªÅ c·∫≠p v√† l√†m s·∫°ch n·ªôi dung
    const processedMessage = await this.processDiscordMessage(message);
    
    // S·ª≠ d·ª•ng n·ªôi dung ƒë√£ l√†m s·∫°ch ƒë·ªÉ g·ª≠i ƒë·∫øn API, k√®m theo message object
    return await this.getCompletion(processedMessage.cleanContent, message);
  }
}

module.exports = new GrokClient();
