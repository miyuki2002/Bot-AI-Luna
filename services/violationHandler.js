const { EmbedBuilder } = require('discord.js');
const mongoClient = require('./mongoClient.js');
const modUtils = require('../utils/modUtils.js');
const logger = require('../utils/logger.js');

/**
 * X·ª≠ l√Ω vi ph·∫°m t·ª´ h·ªá th·ªëng gi√°m s√°t
 * @param {Discord.Message} message - Tin nh·∫Øn vi ph·∫°m
 * @param {Object} results - K·∫øt qu·∫£ ph√¢n t√≠ch
 * @returns {Promise<void>}
 */
async function handleViolation(message, results) {
  try {
    const db = mongoClient.getDb();
    const settings = await db.collection('monitor_settings').findOne({ guildId: message.guild.id });
    if (!settings || !settings.enabled) return;

    let actionToTake = 'warn'; // M·∫∑c ƒë·ªãnh l√† c·∫£nh b√°o

    // X√°c ƒë·ªãnh h√†nh ƒë·ªông d·ª±a tr√™n quy t·∫Øc vi ph·∫°m ho·∫∑c m·ª©c ƒë·ªô nghi√™m tr·ªçng
    if (settings.ruleActions && settings.ruleActions[results.violatedRule]) {
      actionToTake = settings.ruleActions[results.violatedRule];
    }
    else if (results.severity) {
      if (results.severity === 'Cao') {
        actionToTake = 'mute';
      } else if (results.severity === 'R·∫•t cao') {
        actionToTake = 'kick';
      } else if (results.severity === 'Nghi√™m tr·ªçng') {
        actionToTake = 'ban';
      }
    }

    // N√¢ng cao m·ª©c x·ª≠ ph·∫°t n·∫øu ph√°t hi·ªán t√†i kho·∫£n gi·∫£ m·∫°o
    if (results.isFakeAccount) {
      if (actionToTake === 'warn') actionToTake = 'mute';
      else if (actionToTake === 'mute') actionToTake = 'kick';
    }

    const violationEmbed = new EmbedBuilder()
      .setColor(
        results.severity === 'Cao' || results.severity === 'R·∫•t cao' || results.severity === 'Nghi√™m tr·ªçng' ? 0xFF0000 :
        results.severity === 'Trung b√¨nh' ? 0xFFA500 : 0xFFFF00
      )
      .setTitle(`üö® Ph√°t hi·ªán vi ph·∫°m ${results.isFakeAccount ? '(C√≥ d·∫•u hi·ªáu t√†i kho·∫£n gi·∫£ m·∫°o)' : ''}`)
      .setDescription(`Bot ƒë√£ ph√°t hi·ªán m·ªôt tin nh·∫Øn vi ph·∫°m quy t·∫Øc server.`)
      .addFields(
        { name: 'Ng∆∞·ªùi d√πng', value: `<@${message.author.id}> (${message.author.tag})`, inline: true },
        { name: 'K√™nh', value: `<#${message.channel.id}>`, inline: true },
        { name: 'Th·ªùi gian', value: `<t:${Math.floor(message.createdTimestamp / 1000)}:F>`, inline: true },
        { name: 'Quy t·∫Øc vi ph·∫°m', value: results.violatedRule, inline: true },
        { name: 'M·ª©c ƒë·ªô', value: results.severity, inline: true },
        { name: 'H√†nh ƒë·ªông', value: actionToTake, inline: true },
        { name: 'L√Ω do', value: results.reason },
        { name: 'N·ªôi dung tin nh·∫Øn', value: message.content.length > 1024 ? message.content.substring(0, 1021) + '...' : message.content }
      )
      .setTimestamp();

    // T√¨m k√™nh log ph√π h·ª£p
    let logChannel = null;

    const logSettings = await db.collection('mod_settings').findOne({ guildId: message.guild.id });

    if (logSettings && logSettings.logChannelId) {
      try {
        logChannel = await message.guild.channels.fetch(logSettings.logChannelId);
      } catch (error) {
        logger.error('MONITOR', `Kh√¥ng th·ªÉ t√¨m th·∫•y k√™nh log ${logSettings.logChannelId}:`, error);
      }
    }

    // T√¨m k√™nh log m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ k√™nh ƒë∆∞·ª£c c√†i ƒë·∫∑t
    if (!logChannel) {
      logChannel = message.guild.channels.cache.find(
        channel => channel.name.includes('mod-logs') ||
                  channel.name.includes('mod-chat') ||
                  channel.name.includes('admin') ||
                  channel.name.includes('bot-logs')
      );
    }

    if (logChannel && logChannel.isTextBased()) {
      await logChannel.send({ embeds: [violationEmbed] });
    }

    // T·∫°o tin nh·∫Øn c·∫£nh b√°o tr·ª±c ti·∫øp cho ng∆∞·ªùi vi ph·∫°m
    let warningMessage = `<@${message.author.id}> `;

    const actionEmoji = {
      'warn': '‚ö†Ô∏è',
      'mute': 'üîá',
      'kick': 'üë¢',
      'ban': 'üö´'
    };

    if (actionToTake === 'mute') {
      warningMessage += `${actionEmoji.mute} **C·∫¢NH B√ÅO NGHI√äM TR·ªåNG**: ${results.reason}. `;
      warningMessage += `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}. `;
      warningMessage += `B·∫°n ƒë√£ b·ªã t·∫°m th·ªùi mute trong 10 ph√∫t.`;
    } else if (actionToTake === 'kick') {
      warningMessage += `${actionEmoji.kick} **C·∫¢NH B√ÅO NGHI√äM TR·ªåNG**: ${results.reason}. `;
      warningMessage += `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}. `;
      warningMessage += `B·∫°n s·∫Ω b·ªã kick kh·ªèi server.`;
    } else if (actionToTake === 'ban') {
      warningMessage += `${actionEmoji.ban} **C·∫¢NH B√ÅO NGHI√äM TR·ªåNG**: ${results.reason}. `;
      warningMessage += `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}. `;
      warningMessage += `B·∫°n s·∫Ω b·ªã ban vƒ©nh vi·ªÖn kh·ªèi server.`;
    } else {
      warningMessage += `${actionEmoji.warn} **C·∫¢NH B√ÅO**: ${results.reason}. `;
      warningMessage += `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}. `;
      warningMessage += `Vui l√≤ng tu√¢n th·ªß quy t·∫Øc c·ªßa server.`;
    }

    try {
      await message.channel.send(warningMessage);
    } catch (error) {
      logger.error('MONITOR', 'Kh√¥ng th·ªÉ g·ª≠i c·∫£nh b√°o tr·ª±c ti·∫øp:', error);
    }

    try {
      // X√≥a tin nh·∫Øn vi ph·∫°m n·∫øu c√≥ h√†nh ƒë·ªông nghi√™m tr·ªçng
      if (actionToTake !== 'warn') {
        try {
          await message.delete();
          logger.info('MONITOR', `ƒê√£ x√≥a tin nh·∫Øn vi ph·∫°m t·ª´ ${message.author.tag}`);
        } catch (error) {
          logger.error('MONITOR', 'Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn:', error);
        }
      }

      // Th·ª±c hi·ªán h√†nh ƒë·ªông tr√™n ng∆∞·ªùi vi ph·∫°m
      if (actionToTake === 'mute') {
        const muteDuration = 10 * 60 * 1000; // 10 ph√∫t
        await message.member.timeout(muteDuration, `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}`);
        logger.info('MONITOR', `ƒê√£ mute ${message.author.tag} trong 10 ph√∫t v√¨ vi ph·∫°m quy t·∫Øc`);

        // L∆∞u h√†nh ƒë·ªông v√†o log h·ªá th·ªëng
        await modUtils.logModAction({
          guildId: message.guild.id,
          targetId: message.author.id,
          moderatorId: message.client.user.id,
          action: 'mute',
          reason: `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}`,
          duration: 10
        });
      } else if (actionToTake === 'kick') {
        await message.member.kick(`Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}`);
        logger.info('MONITOR', `ƒê√£ kick ${message.author.tag} v√¨ vi ph·∫°m quy t·∫Øc`);

        await modUtils.logModAction({
          guildId: message.guild.id,
          targetId: message.author.id,
          moderatorId: message.client.user.id,
          action: 'kick',
          reason: `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}`
        });
      } else if (actionToTake === 'ban') {
        await message.member.ban({
          reason: `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}`,
          deleteMessageSeconds: 86400 // X√≥a tin nh·∫Øn trong 24 gi·ªù
        });
        logger.info('MONITOR', `ƒê√£ ban ${message.author.tag} v√¨ vi ph·∫°m quy t·∫Øc`);

        await modUtils.logModAction({
          guildId: message.guild.id,
          targetId: message.author.id,
          moderatorId: message.client.user.id,
          action: 'ban',
          reason: `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}`
        });
      } else {
        await modUtils.logModAction({
          guildId: message.guild.id,
          targetId: message.author.id,
          moderatorId: message.client.user.id,
          action: 'warn',
          reason: `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}`
        });
      }
    } catch (error) {
      logger.error('MONITOR', `L·ªói khi th·ª±c hi·ªán h√†nh ƒë·ªông ${actionToTake}:`, error);
    }
  } catch (error) {
    logger.error('MONITOR', 'L·ªói khi x·ª≠ l√Ω vi ph·∫°m:', error);
  }
}

module.exports = { handleViolation };
