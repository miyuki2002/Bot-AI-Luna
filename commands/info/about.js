const { SlashCommandBuilder, AttachmentBuilder, EmbedBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle } = require('discord.js');
const NeuralNetworks = require('../../services/NeuralNetworks');
const { formatUptime } = require('../../utils/string');
const { createCanvas, loadImage, registerFont } = require('canvas');
const path = require('path');
const os = require('os');
const fs = require('fs');

// Register fonts
registerFont(path.join(__dirname, '../../assets/fonts/Montserrat-Bold.otf'), { family: 'Montserrat', weight: 'bold' });
registerFont(path.join(__dirname, '../../assets/fonts/Montserrat-Medium.otf'), { family: 'Montserrat', weight: 'medium' });
registerFont(path.join(__dirname, '../../assets/fonts/Montserrat-Regular.otf'), { family: 'Montserrat', weight: 'regular' });
registerFont(path.join(__dirname, '../../assets/fonts/Montserrat-SemiBold.otf'), { family: 'Montserrat', weight: 'semibold' });

module.exports = {
	data: new SlashCommandBuilder()
		.setName('about')
		.setDescription('Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ Luna bot'),
	
	async execute(interaction) {
		await interaction.deferReply();
		
		try {
			// L·∫•y th√¥ng tin c∆° b·∫£n
			const modelName = NeuralNetworks.Model || "Anthropic Claude";
			const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
			const serverCount = interaction.client.guilds.cache.size;
			const userCount = interaction.client.users.cache.size;
			
			// T·∫°o canvas cho th·∫ª th√¥ng tin
			const canvas = createCanvas(1100, 630);
			const ctx = canvas.getContext('2d');
			
			// N·ªÅn gradient
			const gradient = ctx.createLinearGradient(0, 0, 0, 630);
			gradient.addColorStop(0, '#16161f');
			gradient.addColorStop(1, '#252536');
			ctx.fillStyle = gradient;
			ctx.fillRect(0, 0, 1100, 630);
			
			// V·∫Ω hi·ªáu ·ª©ng √°nh s√°ng
			ctx.beginPath();
			const glow = ctx.createRadialGradient(550, 250, 50, 550, 250, 400);
			glow.addColorStop(0, 'rgba(174, 134, 253, 0.4)');
			glow.addColorStop(1, 'rgba(174, 134, 253, 0)');
			ctx.fillStyle = glow;
			ctx.fillRect(0, 0, 1100, 630);
			
			// V·∫Ω ƒë∆∞·ªùng vi·ªÅn
			ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
			ctx.lineWidth = 2;
			roundRect(ctx, 20, 20, 1060, 590, 15);
			ctx.stroke();
			
			// V·∫Ω hi·ªáu ·ª©ng ƒë∆∞·ªùng th·∫≥ng trang tr√≠
			drawDecorativeLine(ctx, 50, 160, 1050, 160, '#9B59B6', 0.5);
			drawDecorativeLine(ctx, 50, 450, 1050, 450, '#9B59B6', 0.5);
			
			// Load v√† v·∫Ω ·∫£nh Luna
			let avatarImage;
			try {
				avatarImage = await loadImage(path.join(__dirname, '../../assets/luna-avatar.png'));
			} catch {
				// Fallback to bot avatar
				avatarImage = await loadImage(interaction.client.user.displayAvatarURL({ extension: 'png', size: 512 }));
			}
			
			// V·∫Ω avatar trong khung tr√≤n
			ctx.save();
			ctx.beginPath();
			ctx.arc(200, 100, 80, 0, Math.PI * 2, true);
			ctx.closePath();
			ctx.clip();
			ctx.drawImage(avatarImage, 120, 20, 160, 160);
			ctx.restore();
			
			// T√™n bot
			ctx.font = 'bold 48px Montserrat';
			ctx.fillStyle = '#FFFFFF';
			ctx.fillText('Luna AI', 320, 90);
			
			// M√¥ t·∫£
			ctx.font = '28px Montserrat';
			ctx.fillStyle = '#AE86FD';
			ctx.fillText('Tr·ª£ l√Ω AI th√¥ng minh c·ªßa b·∫°n', 320, 130);
			
			// Khung th√¥ng tin k·ªπ thu·∫≠t
			drawInfoBox(ctx, 50, 200, 500, 220, 'Th√¥ng tin k·ªπ thu·∫≠t', [
				{ icon: 'ü§ñ', label: 'Model AI', value: modelName },
				{ icon: '‚è∞', label: 'Th·ªùi gian ho·∫°t ƒë·ªông', value: formatUptime(process.uptime(), false) },
				{ icon: 'üñ•Ô∏è', label: 'Phi√™n b·∫£n Node', value: process.version },
				{ icon: 'üìä', label: 'B·ªô nh·ªõ s·ª≠ d·ª•ng', value: `${memoryUsage} MB` },
				{ icon: 'üè†', label: 'S·ªë l∆∞·ª£ng server', value: serverCount.toString() }
			]);
			
			// Khung t√≠nh nƒÉng
			drawInfoBox(ctx, 570, 200, 480, 220, 'T√≠nh nƒÉng', [
				{ icon: 'üí¨', label: 'Tr√≤ chuy·ªán AI', value: 'Mention @Luna' },
				{ icon: 'üé®', label: 'T·∫°o h√¨nh ·∫£nh', value: 'v·∫Ω [m√¥ t·∫£]' },
				{ icon: 'üß†', label: 'H·ªó tr·ª£ l·∫≠p tr√¨nh', value: 'code [y√™u c·∫ßu]' },
				{ icon: 'üìã', label: 'Qu·∫£n l√Ω tin nh·∫Øn', value: 'x√≥a l·ªãch s·ª≠' }
			]);
			
			// Th√¥ng tin li√™n h·ªá
			ctx.font = 'semibold 28px Montserrat';
			ctx.fillStyle = '#FFFFFF';
			ctx.fillText('Li√™n h·ªá & H·ªó tr·ª£', 550 - ctx.measureText('Li√™n h·ªá & H·ªó tr·ª£').width / 2, 490);
			
			// C√°c bi·ªÉu t∆∞·ª£ng li√™n h·ªá
			drawContactIcons(ctx, 550, 540);
			
			// Footer
			ctx.font = 'regular 18px Montserrat';
			ctx.fillStyle = '#94A1B2';
			const footerText = `Luna Bot v1.0.2 ‚Ä¢ Developed by s4ory ‚Ä¢ ${new Date().toISOString().split('T')[0]}`;
			ctx.fillText(footerText, 550 - ctx.measureText(footerText).width / 2, 600);
			
			// T·∫°o attachment t·ª´ canvas
			const attachment = new AttachmentBuilder(canvas.toBuffer(), { name: 'about-luna.png' });
			
			// T·∫°o embed ƒë∆°n gi·∫£n ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh
			const aboutEmbed = new EmbedBuilder()
				.setColor(0x9B59B6)
				.setImage('attachment://about-luna.png')
				.setFooter({ text: 'S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t√¨m hi·ªÉu th√™m v·ªÅ Luna' });
			
			// C√°c n√∫t t∆∞∆°ng t√°c
			const row = new ActionRowBuilder().addComponents(
				new ButtonBuilder()
					.setLabel('M·ªùi Luna')
					.setEmoji('‚úâÔ∏è')
					.setURL(`https://discord.com/api/oauth2/authorize?client_id=${interaction.client.user.id}&permissions=8&scope=bot%20applications.commands`)
					.setStyle(ButtonStyle.Link),
					
				new ButtonBuilder()
					.setLabel('T√†i li·ªáu')
					.setEmoji('üìö')
					.setURL('https://github.com/miyuki2002/Luna-AI')
					.setStyle(ButtonStyle.Link),
					
				new ButtonBuilder()
					.setLabel('H·ªó tr·ª£')
					.setEmoji('üí¨')
					.setURL('https://discord.gg/52hSMAt')
					.setStyle(ButtonStyle.Link),
					
				new ButtonBuilder()
					.setLabel('Website')
					.setEmoji('üåê')
					.setURL('https://lunabot.art')
					.setStyle(ButtonStyle.Link)
			);
			
			// Ph·∫£n h·ªìi v·ªõi embed v√† c√°c n√∫t
			await interaction.editReply({ 
				embeds: [aboutEmbed], 
				files: [attachment],
				components: [row]
			});
			
		} catch (error) {
			console.error('L·ªói t·∫°o h√¨nh ·∫£nh about:', error);
			
			// Fallback v·ªÅ embed ƒë∆°n gi·∫£n n·∫øu c√≥ l·ªói
			const fallbackEmbed = new EmbedBuilder()
				.setColor(0x9B59B6)
				.setTitle('‚ú® Luna AI - Tr·ª£ l√Ω th√¥ng minh c·ªßa b·∫°n')
				.setThumbnail(interaction.client.user.displayAvatarURL({ dynamic: true, size: 512 }))
				.setDescription('*Luna l√† tr·ª£ l√Ω AI th√¢n thi·ªán, lu√¥n s·∫µn s√†ng tr√≤ chuy·ªán v√† gi√∫p ƒë·ª° b·∫°n v·ªõi kh·∫£ nƒÉng tr√≠ tu·ªá nh√¢n t·∫°o ti√™n ti·∫øn.*')
				.addFields(
					{ name: 'üîÑ Runtime', value: formatUptime(process.uptime(), true), inline: true },
					{ name: 'üè† Servers', value: `${interaction.client.guilds.cache.size}`, inline: true },
					{ name: 'üì¶ Memory', value: `${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)} MB`, inline: true }
				)
				.setFooter({ text: `Luna Bot v1.0.2 ‚Ä¢ Developed by s4ory` })
				.setTimestamp();
				
			const row = new ActionRowBuilder().addComponents(
				new ButtonBuilder()
					.setLabel('M·ªùi Luna')
					.setEmoji('‚úâÔ∏è')
					.setURL(`https://discord.com/api/oauth2/authorize?client_id=${interaction.client.user.id}&permissions=8&scope=bot%20applications.commands`)
					.setStyle(ButtonStyle.Link),
				
				new ButtonBuilder()
					.setLabel('H·ªó tr·ª£')
					.setEmoji('üí¨')
					.setURL('https://discord.gg/52hSMAt')
					.setStyle(ButtonStyle.Link)
			);
			
			await interaction.editReply({ 
				embeds: [fallbackEmbed],
				components: [row]
			});
		}
	},
};

// H√†m v·∫Ω ƒë∆∞·ªùng th·∫≥ng trang tr√≠
function drawDecorativeLine(ctx, startX, startY, endX, endY, color, alpha) {
	ctx.save();
	ctx.strokeStyle = color;
	ctx.globalAlpha = alpha;
	ctx.lineWidth = 1;
	ctx.beginPath();
	ctx.moveTo(startX, startY);
	ctx.lineTo(endX, endY);
	ctx.stroke();
	
	// V·∫Ω ch·∫•m trang tr√≠
	ctx.globalAlpha = alpha + 0.3;
	ctx.fillStyle = color;
	ctx.beginPath();
	ctx.arc(startX, startY, 3, 0, Math.PI * 2);
	ctx.fill();
	ctx.beginPath();
	ctx.arc(endX, endY, 3, 0, Math.PI * 2);
	ctx.fill();
	ctx.restore();
}

// H√†m v·∫Ω khung th√¥ng tin
function drawInfoBox(ctx, x, y, width, height, title, items) {
	// Khung n·ªÅn v·ªõi m√†u n·ªÅn nh·∫π
	ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
	roundRect(ctx, x, y, width, height, 15, true);
	
	// Ti√™u ƒë·ªÅ
	ctx.font = 'semibold 24px Montserrat';
	ctx.fillStyle = '#FFFFFF';
	ctx.fillText(title, x + 20, y + 35);
	
	// V·∫Ω d√≤ng ngƒÉn c√°ch
	ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
	ctx.beginPath();
	ctx.moveTo(x + 20, y + 50);
	ctx.lineTo(x + width - 20, y + 50);
	ctx.stroke();
	
	// V·∫Ω c√°c m·ª•c th√¥ng tin
	let yOffset = y + 90;
	items.forEach(item => {
		// Icon
		ctx.font = '20px Montserrat';
		ctx.fillText(item.icon, x + 25, yOffset);
		
		// Label
		ctx.font = 'medium 20px Montserrat';
		ctx.fillStyle = '#AE86FD';
		ctx.fillText(item.label + ':', x + 60, yOffset);
		
		// Value
		ctx.font = '20px Montserrat';
		ctx.fillStyle = '#FFFFFF';
		ctx.fillText(item.value, x + 60 + ctx.measureText(item.label + ': ').width, yOffset);
		
		yOffset += 40;
	});
}

// H√†m v·∫Ω c√°c bi·ªÉu t∆∞·ª£ng li√™n h·ªá
function drawContactIcons(ctx, centerX, y) {
	const icons = [
		{ emoji: '‚úâÔ∏è', text: 'Invite' },
		{ emoji: 'üìö', text: 'Docs' },
		{ emoji: 'üí¨', text: 'Support' },
		{ emoji: 'üåê', text: 'Website' }
	];
	
	const iconWidth = 100;
	const totalWidth = iconWidth * icons.length;
	let startX = centerX - totalWidth / 2;
	
	icons.forEach(icon => {
		// Emoji
		ctx.font = '28px Montserrat';
		ctx.fillStyle = '#FFFFFF';
		ctx.fillText(icon.emoji, startX + 40, y - 15);
		
		// Text
		ctx.font = 'regular 16px Montserrat';
		ctx.fillStyle = '#94A1B2';
		const textWidth = ctx.measureText(icon.text).width;
		ctx.fillText(icon.text, startX + 50 - textWidth / 2, y + 15);
		
		startX += iconWidth;
	});
}

// H√†m v·∫Ω h√¨nh ch·ªØ nh·∫≠t bo g√≥c
function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
	if (typeof radius === 'undefined') {
		radius = 5;
	}
	if (typeof radius === 'number') {
		radius = {tl: radius, tr: radius, br: radius, bl: radius};
	} else {
		const defaultRadius = {tl: 0, tr: 0, br: 0, bl: 0};
		for (let side in defaultRadius) {
			radius[side] = radius[side] || defaultRadius[side];
		}
	}
	ctx.beginPath();
	ctx.moveTo(x + radius.tl, y);
	ctx.lineTo(x + width - radius.tr, y);
	ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
	ctx.lineTo(x + width, y + height - radius.br);
	ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
	ctx.lineTo(x + radius.bl, y + height);
	ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
	ctx.lineTo(x, y + radius.tl);
	ctx.quadraticCurveTo(x, y, x + radius.tl, y);
	ctx.closePath();
	if (fill) {
		ctx.fill();
	}
	if (stroke) {
		ctx.stroke();
	}
}
