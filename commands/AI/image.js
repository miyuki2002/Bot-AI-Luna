const { SlashCommandBuilder, AttachmentBuilder } = require('discord.js');
const NeuralNetworks = require('../../services/NeuralNetworks');
const logger = require('../../utils/logger.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('image')
    .setDescription('V·∫Ω m·ªôt h√¨nh ·∫£nh t·ª´ tr√≠ t∆∞·ªüng t∆∞·ª£ng c·ªßa b·∫°n')
    .addStringOption(option =>
      option.setName('prompt')
        .setDescription('H√£y m√¥ t·∫£ b·ª©c tranh b·∫°n mu·ªën t√¥i v·∫Ω')
        .setRequired(true)),

  async execute(interaction) {
    const prompt = interaction.options.getString('prompt');

    await interaction.deferReply();

    try {
      const imageResult = await NeuralNetworks.generateImage(prompt);

      if (typeof imageResult === 'string') {
        await interaction.editReply(`‚ùå ${imageResult}`);
        return;
      }
      
      // T·∫°o attachment t·ª´ buffer
      const attachment = new AttachmentBuilder(imageResult.buffer, { name: 'generated-image.png' });

      // G·ª≠i ·∫£nh d∆∞·ªõi d·∫°ng t·ªáp ƒë√≠nh k√®m
      await interaction.editReply({
        content: `üé® ƒê√¢y l√† b·ª©c tranh t√¥i v·∫Ω theo √Ω t∆∞·ªüng c·ªßa b·∫°n: "${prompt}"`,
        files: [attachment]
      });
    } catch (error) {
      logger.error('COMMAND', 'L·ªói khi t·∫°o h√¨nh ·∫£nh:', error);
      await interaction.editReply('Xin l·ªói, t√¥i kh√¥ng th·ªÉ ho√†n th√†nh b·ª©c tranh l√∫c n√†y. H√£y th·ª≠ l·∫°i sau nh√©!');
    }
  },
};
