const { createCanvas, loadImage, registerFont } = require('canvas');
const path = require('path');
const fs = require('fs').promises;

// ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c assets
const ASSETS_PATH = path.join(__dirname, '../assets');

class ProfileCanvas {
  constructor() {
    // ƒêƒÉng k√Ω fonts n·∫øu c√≥
    this.initializeFonts();
    
    // C√°c m√†u m·∫∑c ƒë·ªãnh
    this.colors = {
      pink: '#FFB6C1',
      darkPink: '#FF69B4',
      white: '#FFFFFF',
      black: '#000000',
      gray: '#808080',
      purple: '#9370DB'
    };
    
    // Cache c√°c h√¨nh ·∫£nh th∆∞·ªùng d√πng
    this.imageCache = {};
  }
  
  /**
   * ƒêƒÉng k√Ω fonts cho canvas
   */
  async initializeFonts() {
    try {
      const fontsPath = path.join(ASSETS_PATH, 'fonts');
      
      // Ki·ªÉm tra xem th∆∞ m·ª•c fonts c√≥ t·ªìn t·∫°i kh√¥ng
      try {
        await fs.access(fontsPath);
        
        // ƒêƒÉng k√Ω fonts t√πy ch·ªânh n·∫øu c√≥
        registerFont(path.join(fontsPath, 'Roboto-Regular.ttf'), { family: 'Roboto' });
        registerFont(path.join(fontsPath, 'Roboto-Bold.ttf'), { family: 'Roboto', weight: 'bold' });
        
        console.log('ƒê√£ ƒëƒÉng k√Ω fonts th√†nh c√¥ng');
      } catch (err) {
        console.log('Th∆∞ m·ª•c fonts kh√¥ng t·ªìn t·∫°i, s·∫Ω s·ª≠ d·ª•ng fonts m·∫∑c ƒë·ªãnh');
      }
    } catch (error) {
      console.error('L·ªói khi ƒëƒÉng k√Ω fonts:', error);
    }
  }
  
  /**
   * T·∫£i h√¨nh ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n ho·∫∑c s·ª≠ d·ª•ng cache
   * @param {string} imagePath - ƒê∆∞·ªùng d·∫´n t·ªõi h√¨nh ·∫£nh
   * @returns {Promise<Image>} - ƒê·ªëi t∆∞·ª£ng h√¨nh ·∫£nh ƒë√£ t·∫£i
   */
  async loadImageWithCache(imagePath) {
    try {
      if (this.imageCache[imagePath]) {
        return this.imageCache[imagePath];
      }
      
      const image = await loadImage(imagePath);
      this.imageCache[imagePath] = image;
      return image;
    } catch (error) {
      console.error(`L·ªói khi t·∫£i h√¨nh ·∫£nh ${imagePath}:`, error);
      throw error;
    }
  }
  
  /**
   * T·∫°o profile card cho ng∆∞·ªùi d√πng
   * @param {Object} profileData - D·ªØ li·ªáu profile c·ªßa ng∆∞·ªùi d√πng
   * @returns {Promise<Buffer>} - Buffer h√¨nh ·∫£nh profile card
   */
  async createProfileCard(profileData) {
    try {
      // T·∫°o canvas v·ªõi k√≠ch th∆∞·ªõc 800x400px
      const canvas = createCanvas(800, 400);
      const ctx = canvas.getContext('2d');
      
      // V·∫Ω n·ªÅn
      await this.drawBackground(ctx, profileData.customization);
      
      // V·∫Ω khung b√™n tr√°i (th√¥ng tin ng∆∞·ªùi d√πng)
      await this.drawLeftPanel(ctx, profileData);
      
      // V·∫Ω khung b√™n ph·∫£i (th√¥ng tin chi ti·∫øt)
      await this.drawRightPanel(ctx, profileData);
      
      // Tr·∫£ v·ªÅ buffer h√¨nh ·∫£nh
      return canvas.toBuffer('image/png');
    } catch (error) {
      console.error('L·ªói khi t·∫°o profile card:', error);
      throw error;
    }
  }
  
  /**
   * V·∫Ω n·ªÅn cho profile card
   * @param {CanvasRenderingContext2D} ctx - Context c·ªßa canvas
   * @param {Object} customization - T√πy ch·ªânh profile c·ªßa ng∆∞·ªùi d√πng
   */
  async drawBackground(ctx, customization) {
    try {
      // V·∫Ω h√¨nh n·ªÅn m·∫∑c ƒë·ªãnh m√†u h·ªìng
      ctx.fillStyle = customization.color || this.colors.pink;
      ctx.fillRect(0, 0, 800, 400);
      
      // N·∫øu c√≥ pattern, v·∫Ω pattern
      if (customization.pattern) {
        try {
          const patternPath = path.join(ASSETS_PATH, 'patterns', `${customization.pattern}.png`);
          const patternImage = await this.loadImageWithCache(patternPath);
          
          // T·∫°o pattern v√† v·∫Ω l√™n n·ªÅn
          const pattern = ctx.createPattern(patternImage, 'repeat');
          ctx.fillStyle = pattern;
          ctx.fillRect(0, 0, 800, 400);
        } catch (err) {
          console.warn('Kh√¥ng t√¨m th·∫•y pattern:', err);
        }
      } else {
        // Pattern m·∫∑c ƒë·ªãnh v·ªõi th·ªè v√† sao
        ctx.textAlign = 'center';
        ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
        ctx.font = '24px "Roboto"';
        
        // V·∫Ω hoa vƒÉn ƒë∆°n gi·∫£n (sao v√† emoji th·ªè)
        const stars = ['‚òÖ', '‚òÜ', '‚ú©', '‚úß'];
        const bunny = 'üê∞';
        for (let i = 0; i < 20; i++) {
          const x = Math.random() * 350;
          const y = Math.random() * 400;
          const symbol = i % 5 === 0 ? bunny : stars[i % stars.length];
          ctx.fillText(symbol, x, y);
        }
      }
      
      // V·∫Ω ƒë∆∞·ªùng ph√¢n c√°ch gi·ªØa hai panel
      ctx.fillStyle = this.colors.white;
      ctx.fillRect(320, 0, 5, 400);
      
      // V·∫Ω khung ti√™u ƒë·ªÅ "TIP" ·ªü g√≥c tr√™n b√™n ph·∫£i
      ctx.fillStyle = this.colors.pink;
      ctx.fillRect(575, 0, 225, 75);
      
      ctx.fillStyle = this.colors.white;
      ctx.font = 'bold 35px "Roboto"';
      ctx.textAlign = 'center';
      ctx.fillText('TIP', 650, 45);
      
      ctx.font = 'bold 40px "Roboto"';
      ctx.fillText('1', 760, 45);
      
    } catch (error) {
      console.error('L·ªói khi v·∫Ω n·ªÅn:', error);
      throw error;
    }
  }
  
  /**
   * V·∫Ω panel b√™n tr√°i (th√¥ng tin ng∆∞·ªùi d√πng)
   * @param {CanvasRenderingContext2D} ctx - Context c·ªßa canvas
   * @param {Object} profileData - D·ªØ li·ªáu profile c·ªßa ng∆∞·ªùi d√πng
   */
  async drawLeftPanel(ctx, profileData) {
    try {
      // V·∫Ω khung h√¨nh ƒë·∫°i di·ªán
      ctx.beginPath();
      ctx.arc(160, 150, 80, 0, Math.PI * 2);
      ctx.fillStyle = this.colors.white;
      ctx.fill();
      ctx.closePath();
      
      // V·∫Ω h√¨nh ƒë·∫°i di·ªán ng∆∞·ªùi d√πng
      try {
        // Th·ª≠ t·∫£i avatar c·ªßa user (ƒë√¢y ch·ªâ l√† v√≠ d·ª•, b·∫°n c·∫ßn thay th·∫ø ƒë∆∞·ªùng d·∫´n)
        const avatarPath = path.join(ASSETS_PATH, 'avatars', `${profileData.userId}.png`);
        const avatar = await this.loadImageWithCache(avatarPath);
        
        // V·∫Ω avatar trong khung tr√≤n
        ctx.save();
        ctx.beginPath();
        ctx.arc(160, 150, 75, 0, Math.PI * 2);
        ctx.clip();
        ctx.drawImage(avatar, 85, 75, 150, 150);
        ctx.restore();
      } catch (err) {
        // N·∫øu kh√¥ng c√≥ avatar, v·∫Ω ch·ªØ c√°i ƒë·∫ßu ti√™n c·ªßa t√™n
        ctx.font = 'bold 60px "Roboto"';
        ctx.fillStyle = this.colors.pink;
        ctx.textAlign = 'center';
        ctx.fillText(
          (profileData.username || 'U').charAt(0).toUpperCase(), 
          160, 
          170
        );
      }
      
      // V·∫Ω v√≤ng nguy·ªát qu·∫ø n·∫øu c√≥
      if (profileData.customization.wreath) {
        try {
          const wreathPath = path.join(ASSETS_PATH, 'wreaths', `${profileData.customization.wreath}.png`);
          const wreath = await this.loadImageWithCache(wreathPath);
          ctx.drawImage(wreath, 70, 60, 180, 180);
        } catch (err) {
          console.warn('Kh√¥ng t√¨m th·∫•y wreath:', err);
        }
      }
      
      // V·∫Ω t√™n ng∆∞·ªùi d√πng
      ctx.font = 'bold 32px "Roboto"';
      ctx.fillStyle = this.colors.white;
      ctx.textAlign = 'center';
      ctx.fillText(profileData.username || 'User', 160, 270);
      
      // V·∫Ω tag discriminator
      ctx.font = '18px "Roboto"';
      ctx.fillText(`#${profileData.discriminator || '0000'}`, 160, 295);
      
      // V·∫Ω c√°c huy hi·ªáu th√†nh t·ª±u
      this.drawBadges(ctx, profileData);
      
      // V·∫Ω th√¥ng tin c·∫•p ƒë·ªô
      this.drawLevelInfo(ctx, profileData);
    } catch (error) {
      console.error('L·ªói khi v·∫Ω panel b√™n tr√°i:', error);
      throw error;
    }
  }
  
  /**
   * V·∫Ω panel b√™n ph·∫£i (th√¥ng tin chi ti·∫øt)
   * @param {CanvasRenderingContext2D} ctx - Context c·ªßa canvas
   * @param {Object} profileData - D·ªØ li·ªáu profile c·ªßa ng∆∞·ªùi d√πng
   */
  async drawRightPanel(ctx, profileData) {
    try {
      const startX = 340;
      let currentY = 120;
      
      // V·∫Ω ti√™u ƒë·ªÅ BIO
      ctx.font = 'bold 24px "Roboto"';
      ctx.fillStyle = this.colors.white;
      ctx.textAlign = 'left';
      ctx.fillText('BIO', startX, currentY);
      
      // V·∫Ω khung bio
      ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
      ctx.fillRect(startX, currentY + 10, 440, 60);
      
      // V·∫Ω n·ªôi dung bio
      ctx.font = '18px "Roboto"';
      ctx.fillStyle = this.colors.white;
      const bio = profileData.bio || 'No bio written.';
      
      // C·∫Øt bio n·∫øu qu√° d√†i
      if (bio.length > 60) {
        ctx.fillText(bio.substring(0, 57) + '...', startX + 10, currentY + 45);
      } else {
        ctx.fillText(bio, startX + 10, currentY + 45);
      }
      
      // C·∫≠p nh·∫≠t v·ªã tr√≠ Y
      currentY += 100;
      
      // V·∫Ω ti√™u ƒë·ªÅ BIRTHDAY
      ctx.font = 'bold 24px "Roboto"';
      ctx.fillText('BIRTHDAY', startX, currentY);
      
      // V·∫Ω khung birthday
      ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
      ctx.fillRect(startX, currentY + 10, 210, 40);
      
      // V·∫Ω n·ªôi dung birthday
      ctx.font = '18px "Roboto"';
      ctx.fillStyle = this.colors.white;
      ctx.fillText(
        profileData.birthday || 'Not specified', 
        startX + 10, 
        currentY + 35
      );
      
      // C·∫≠p nh·∫≠t v·ªã tr√≠ Y
      currentY += 80;
      
      // V·∫Ω ti√™u ƒë·ªÅ BALANCE
      ctx.font = 'bold 24px "Roboto"';
      ctx.fillText('BALANCE', startX, currentY);
      
      // V·∫Ω khung wallet
      ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
      ctx.fillRect(startX, currentY + 10, 210, 40);
      
      // V·∫Ω icon wallet
      ctx.font = '18px "Roboto"';
      ctx.fillStyle = this.colors.white;
      ctx.fillText('üí∞:', startX + 10, currentY + 35);
      
      // V·∫Ω s·ªë ti·ªÅn wallet
      ctx.textAlign = 'right';
      ctx.fillText(
        profileData.economy.wallet.toLocaleString(), 
        startX + 200, 
        currentY + 35
      );
      
      // V·∫Ω khung bank
      ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
      ctx.fillRect(startX + 230, currentY + 10, 210, 40);
      
      // V·∫Ω icon bank
      ctx.textAlign = 'left';
      ctx.fillText('üè¶:', startX + 240, currentY + 35);
      
      // V·∫Ω s·ªë ti·ªÅn bank
      ctx.textAlign = 'right';
      ctx.fillText(
        profileData.economy.bank.toLocaleString(), 
        startX + 430, 
        currentY + 35
      );
      
      // V·∫Ω bi·ªÉu t∆∞·ª£ng ·ªü g√≥c ph·∫£i d∆∞·ªõi
      if (profileData.customization.emblem) {
        try {
          const emblemPath = path.join(ASSETS_PATH, 'emblems', `${profileData.customization.emblem}.png`);
          const emblem = await this.loadImageWithCache(emblemPath);
          ctx.drawImage(emblem, 660, 290, 100, 100);
        } catch (err) {
          console.warn('Kh√¥ng t√¨m th·∫•y emblem:', err);
        }
      }
    } catch (error) {
      console.error('L·ªói khi v·∫Ω panel b√™n ph·∫£i:', error);
      throw error;
    }
  }
  
  /**
   * V·∫Ω c√°c huy hi·ªáu th√†nh t·ª±u
   * @param {CanvasRenderingContext2D} ctx - Context c·ªßa canvas
   * @param {Object} profileData - D·ªØ li·ªáu profile c·ªßa ng∆∞·ªùi d√πng
   */
  drawBadges(ctx, profileData) {
    const badges = [
      { x: 60, y: 350 },
      { x: 120, y: 350 },
      { x: 180, y: 350 },
      { x: 240, y: 350 }
    ];
    
    // V·∫Ω n·ªÅn cho c√°c huy hi·ªáu
    badges.forEach(badge => {
      ctx.beginPath();
      ctx.arc(badge.x, badge.y, 25, 0, Math.PI * 2);
      ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
      ctx.fill();
      ctx.closePath();
    });
    
    // ·ªû ƒë√¢y s·∫Ω v·∫Ω c√°c huy hi·ªáu th·∫≠t s·ª± n·∫øu ng∆∞·ªùi d√πng c√≥
    // V√≠ d·ª•:
    // if (profileData.badges && profileData.badges.length > 0) {
    //   profileData.badges.forEach((badge, index) => {
    //     if (index < badges.length) {
    //       // V·∫Ω badge
    //     }
    //   });
    // }
  }
  
  /**
   * V·∫Ω th√¥ng tin c·∫•p ƒë·ªô
   * @param {CanvasRenderingContext2D} ctx - Context c·ªßa canvas
   * @param {Object} profileData - D·ªØ li·ªáu profile c·ªßa ng∆∞·ªùi d√πng
   */
  drawLevelInfo(ctx, profileData) {
    // V·∫Ω v√≤ng tr√≤n c·∫•p ƒë·ªô
    ctx.beginPath();
    ctx.arc(60, 450, 40, 0, Math.PI * 2);
    ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
    ctx.fill();
    ctx.closePath();
    
    // V·∫Ω ch·ªØ LVL
    ctx.font = 'bold 16px "Roboto"';
    ctx.fillStyle = this.colors.pink;
    ctx.textAlign = 'center';
    ctx.fillText('LVL', 60, 440);
    
    // V·∫Ω s·ªë c·∫•p ƒë·ªô
    ctx.font = 'bold 24px "Roboto"';
    ctx.fillText(profileData.level.toString(), 60, 470);
    
    // V·∫Ω x·∫øp h·∫°ng m√°y ch·ªß
    ctx.beginPath();
    ctx.arc(160, 450, 40, 0, Math.PI * 2);
    ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
    ctx.fill();
    ctx.closePath();
    
    // V·∫Ω th·ª© h·∫°ng
    let serverRank = profileData.rank?.server || 'N/A';
    if (Number.isInteger(serverRank)) {
      if (serverRank === 1) serverRank = '1st';
      else if (serverRank === 2) serverRank = '2nd';
      else if (serverRank === 3) serverRank = '3rd';
      else serverRank = `${serverRank}th`;
    }
    
    ctx.font = 'bold 16px "Roboto"';
    ctx.fillText(serverRank, 160, 450);
    ctx.font = '12px "Roboto"';
    ctx.fillText('SERVER', 160, 470);
    
    // V·∫Ω x·∫øp h·∫°ng to√†n c·∫ßu
    ctx.beginPath();
    ctx.arc(260, 450, 40, 0, Math.PI * 2);
    ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
    ctx.fill();
    ctx.closePath();
    
    // V·∫Ω th·ª© h·∫°ng to√†n c·∫ßu
    let globalRank = profileData.rank?.global || 'N/A';
    if (Number.isInteger(globalRank)) {
      if (globalRank === 1) globalRank = '1st';
      else if (globalRank === 2) globalRank = '2nd';
      else if (globalRank === 3) globalRank = '3rd';
      else globalRank = `${globalRank}th`;
    }
    
    ctx.font = 'bold 16px "Roboto"';
    ctx.fillText(globalRank, 260, 450);
    ctx.font = '12px "Roboto"';
    ctx.fillText('GLOBAL', 260, 470);
  }
}

// T·∫°o v√† xu·∫•t instance duy nh·∫•t
const profileCanvas = new ProfileCanvas();
module.exports = profileCanvas;
