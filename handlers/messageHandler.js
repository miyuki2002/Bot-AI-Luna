const { EmbedBuilder, AttachmentBuilder } = require('discord.js');
const NeuralNetworks = require('../services/NeuralNetworks');
const experience = require('../utils/xp');
const logger = require('../utils/logger.js');

/**
 * X·ª≠ l√Ω tin nh·∫Øn Discord ƒë·ªÅ c·∫≠p ƒë·∫øn bot
 * @param {Object} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
 */
async function handleMessage(message) {
  try {
    // Bi·∫øn ƒë·ªÉ ki·ªÉm tra xem l·ªánh c√≥ ƒë∆∞·ª£c th·ª±c thi hay kh√¥ng
    let commandExecuted = false;

    // L·∫•y n·ªôi dung m√† kh√¥ng c√≥ ph·∫ßn ƒë·ªÅ c·∫≠p
    const content = message.content
      .replace(/<@!?\d+>/g, '')
      .trim();

    // N·∫øu kh√¥ng c√≥ n·ªôi dung, kh√¥ng ti·∫øp t·ª•c
    if (!content) {
      await message.reply('T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?');
      return;
    }

    // Ki·ªÉm tra c·∫•u tr√∫c l·ªánh trong n·ªôi dung
    if (content.startsWith('/image')) {
      await handleImageGeneration(message, content.replace('/image', '').trim());
      commandExecuted = true;
      return;
    }

    // T√¨m ki·∫øm y√™u c·∫ßu c·ª• th·ªÉ v·ªÅ m√£
    if (content.toLowerCase().includes('code') ||
      content.toLowerCase().includes('function') ||
      content.toLowerCase().includes('write a')) {
      await handleCodeRequest(message, content);
      commandExecuted = true;
      return;
    }

    // M·∫∑c ƒë·ªãnh l√† ph·∫£n h·ªìi tr√≤ chuy·ªán - lu√¥n truy·ªÅn message object ƒë·∫ßy ƒë·ªß
    await handleChatRequest(message, content);

    // X·ª≠ l√Ω XP sau khi x·ª≠ l√Ω tin nh·∫Øn
    processXp(message, commandExecuted, true);
  } catch (error) {
    logger.error('MESSAGE', `L·ªói khi x·ª≠ l√Ω tin nh·∫Øn t·ª´ ${message.author.tag}:`, error);
    await message.reply('Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.');

    // X·ª≠ l√Ω XP v·ªõi th√¥ng tin r·∫±ng c√≥ l·ªói x·∫£y ra
    processXp(message, false, false);
  }
}

/**
 * X·ª≠ l√Ω h·ªá th·ªëng XP cho ng∆∞·ªùi d√πng
 * @param {Object} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn t·ª´ Discord.js
 * @param {Boolean} commandExecuted - C√≥ l·ªánh n√†o ƒë∆∞·ª£c th·ª±c thi kh√¥ng
 * @param {Boolean} execute - C√≥ n√™n ti·∫øp t·ª•c th·ª±c thi kh√¥ng
 */
async function processXp(message, commandExecuted, execute) {
  try {
    const response = await experience(message, commandExecuted, execute);

    // Ghi log l·ªói kh√¥ng g√¢y ra b·ªüi l√Ω do ƒë√£ bi·∫øt
    if (!response.xpAdded && ![
      'DISABLED',             // XP b·ªã t·∫Øt, c·∫ßn EXPERIENCE_POINTS trong client#features
      'COMMAND_EXECUTED',     // L·ªánh ƒë√£ ƒë∆∞·ª£c th·ª±c thi th√†nh c√¥ng
      'COMMAND_TERMINATED',   // L·ªánh ƒë√£ ƒë∆∞·ª£c t√¨m nh∆∞ng ƒë√£ b·ªã ch·∫•m d·ª©t
      'DM_CHANNEL',           // Tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i trong DM
      'GUILD_SETTINGS_NOT_FOUND', // Kh√¥ng t√¨m th·∫•y c√†i ƒë·∫∑t c·ªßa guild
      'DISABLED_ON_GUILD',    // XP b·ªã t·∫Øt tr√™n server n√†y
      'DISABLED_ON_CHANNEL',  // Tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i trong k√™nh b·ªã ch·∫∑n XP
      'RECENTLY_TALKED'       // Ng∆∞·ªùi g·ª≠i v·ª´a n√≥i g·∫ßn ƒë√¢y
    ].includes(response.reason)) {
      // Ghi log l·ªói n·∫øu c√≥
      if (message.client.logs) {
        message.client.logs.push(`L·ªói XP: ${response.reason} t·∫°i ${message.guild.id}<${message.guild.name}> b·ªüi ${message.author.tag}<${message.author.id}> l√∫c ${new Date()}`);
      } else {
        logger.error('XP', `L·ªói XP: ${response.reason} t·∫°i ${message.guild.id}<${message.guild.name}> b·ªüi ${message.author.tag}<${message.author.id}> l√∫c ${new Date()}`);
      }
    }

    // N·∫øu ng∆∞·ªùi d√πng l√™n c·∫•p, c√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
    if (response.xpAdded && response.level && response.previousLevel && response.level > response.previousLevel) {
      // T√πy ch·ªçn: Th√¥ng b√°o ng∆∞·ªùi d√πng ƒë√£ l√™n c·∫•p
      logger.info('XP', `${message.author.tag} ƒë√£ l√™n c·∫•p ${response.level} trong server ${message.guild.name}`);

      // T√πy ch·ªçn: G·ª≠i th√¥ng b√°o l√™n c·∫•p trong k√™nh
      // await message.channel.send(`üéâ Ch√∫c m·ª´ng ${message.author}! B·∫°n ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô ${response.level}!`);
    }
  } catch (error) {
    logger.error('XP', 'L·ªói khi x·ª≠ l√Ω XP:', error);
  }
}

/**
 * X·ª≠ l√Ω y√™u c·∫ßu tr√≤ chuy·ªán th√¥ng th∆∞·ªùng
 * @param {Object} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
 * @param {string} content - N·ªôi dung tin nh·∫Øn ƒë√£ x·ª≠ l√Ω
 */
async function handleChatRequest(message, content) {
  // Hi·ªÉn th·ªã ch·ªâ b√°o ƒëang nh·∫≠p
  await message.channel.sendTyping();

  try {
    // ƒê·∫£m b·∫£o truy·ªÅn ƒë·ªëi t∆∞·ª£ng message ƒë·∫ßy ƒë·ªß ƒë·ªÉ c√≥ th√¥ng tin ng∆∞·ªùi d√πng ch√≠nh x√°c
    const response = await NeuralNetworks.getCompletion(content, message);

    // Chia ph·∫£n h·ªìi n·∫øu n√≥ qu√° d√†i cho Discord
    if (response.length > 2000) {
      const chunks = splitMessageRespectWords(response, 2000);
      for (const chunk of chunks) {
        await message.reply(chunk);
      }
    } else {
      await message.reply(response);
    }
  } catch (error) {
    logger.error('MESSAGE', `L·ªói khi nh·∫≠n ph·∫£n h·ªìi tr√≤ chuy·ªán cho ${message.author.tag}:`, error);

    // Th√¥ng b√°o chi ti·∫øt h∆°n v·ªÅ l·ªói
    if (error.code === 'EPROTO' || error.code === 'ECONNREFUSED' || error.message.includes('connect')) {
      await message.reply('Xin l·ªói, t√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.');
    } else {
      await message.reply('Xin l·ªói, t√¥i g·∫∑p kh√≥ khƒÉn khi t·∫°o ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }
}

/**
 * X·ª≠ l√Ω y√™u c·∫ßu t·∫°o h√¨nh ·∫£nh
 */
async function handleImageGeneration(message, prompt) {
  if (!prompt) {
    await message.reply('Vui l√≤ng cung c·∫•p m√¥ t·∫£ cho h√¨nh ·∫£nh b·∫°n mu·ªën t√¥i t·∫°o.');
    return;
  }

  await message.channel.sendTyping();

  try {
    // L·∫•y k·∫øt qu·∫£ h√¨nh ·∫£nh t·ª´ generateImage c·ªßa NeuralNetworks
    const imageResult = await NeuralNetworks.generateImage(prompt);

    // N·∫øu nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o l·ªói thay v√¨ k·∫øt qu·∫£
    if (typeof imageResult === 'string') {
      await message.reply(imageResult);
      return;
    }

    // T·∫°o attachment t·ª´ buffer
    const attachment = new AttachmentBuilder(imageResult.buffer, { name: 'generated-image.png' });

    // T·∫°o embed v√† g·ª≠i tr·∫£ l·ªùi v·ªõi file ƒë√≠nh k√®m
    const embed = new EmbedBuilder()
      .setTitle('H√¨nh ·∫¢nh ƒê∆∞·ª£c T·∫°o')
      .setDescription(`M√¥ t·∫£: ${prompt}`)
      .setColor('#0099ff')
      .setTimestamp();

    await message.reply({ 
      embeds: [embed],
      files: [attachment]
    });
  } catch (error) {
    logger.error('IMAGE', 'L·ªói khi t·∫°o h√¨nh ·∫£nh:', error);
    await message.reply('Xin l·ªói, t√¥i g·∫∑p kh√≥ khƒÉn khi t·∫°o h√¨nh ·∫£nh ƒë√≥.');
  }
}

/**
 * X·ª≠ l√Ω y√™u c·∫ßu v·ªÅ m√£
 * @param {Object} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
 * @param {string} prompt - N·ªôi dung tin nh·∫Øn ƒë√£ x·ª≠ l√Ω
 */
async function handleCodeRequest(message, prompt) {
  await message.channel.sendTyping();

  try {
    // ƒê·∫£m b·∫£o truy·ªÅn ƒë·ªëi t∆∞·ª£ng message ƒë·∫ßy ƒë·ªß ƒë·ªÉ c√≥ th√¥ng tin ng∆∞·ªùi d√πng ch√≠nh x√°c
    const codeResponse = await NeuralNetworks.getCodeCompletion(prompt, message);

    // Tr√≠ch xu·∫•t kh·ªëi m√£ ho·∫∑c ƒë·ªãnh d·∫°ng d∆∞·ªõi d·∫°ng m√£
    let formattedResponse = codeResponse;

    // N·∫øu ph·∫£n h·ªìi kh√¥ng ch·ª©a kh·ªëi m√£, b·ªçc n√≥ trong m·ªôt kh·ªëi
    if (!formattedResponse.includes('```')) {
      formattedResponse = formatCodeResponse(formattedResponse);
    }

    // Chia ph·∫£n h·ªìi n·∫øu n√≥ qu√° d√†i cho Discord
    if (formattedResponse.length > 2000) {
      const chunks = splitMessage(formattedResponse, 2000);
      for (const chunk of chunks) {
        await message.reply(chunk);
      }
    } else {
      await message.reply(formattedResponse);
    }
  } catch (error) {
    logger.error('CODE', `L·ªói khi nh·∫≠n m√£ cho ${message.author.tag}:`, error);
    await message.reply('Xin l·ªói, t√¥i g·∫∑p kh√≥ khƒÉn khi t·∫°o m√£ ƒë√≥.');
  }
}

/**
 * ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi d∆∞·ªõi d·∫°ng kh·ªëi m√£ n·∫øu n√≥ ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng
 */
function formatCodeResponse(text) {
  // C·ªë g·∫Øng ph√°t hi·ªán ng√¥n ng·ªØ ho·∫∑c m·∫∑c ƒë·ªãnh l√† javascript
  let language = 'javascript';

  // C√°c m·∫´u ng√¥n ng·ªØ ph·ªï bi·∫øn
  const langPatterns = {
    python: /import\s+[\w.]+|def\s+\w+\s*\(|print\s*\(/i,
    javascript: /const|let|var|function|=>|\bif\s*\(|console\.log/i,
    java: /public\s+class|void\s+main|System\.out|import\s+java/i,
    html: /<html|<div|<body|<head|<!DOCTYPE/i,
    css: /body\s*{|margin:|padding:|color:|@media/i,
    php: /<\?php|\$\w+\s*=/i
  };

  // Ph√°t hi·ªán ng√¥n ng·ªØ
  for (const [lang, pattern] of Object.entries(langPatterns)) {
    if (pattern.test(text)) {
      language = lang;
      break;
    }
  }

  return `\`\`\`${language}\n${text}\n\`\`\``;
}

/**
 * Chia tin nh·∫Øn th√†nh c√°c ph·∫ßn nh·ªè h∆°n
 */
function splitMessage(text, maxLength = 2000) {
  const chunks = [];

  // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho kh·ªëi m√£
  if (text.includes('```')) {
    // Chia theo kh·ªëi m√£ v√† k·∫øt h·ª£p l·∫°i ƒë·ªÉ tr√°nh l√†m gi√°n ƒëo·∫°n ch√∫ng
    const parts = text.split(/(```(?:\w+)?\n[\s\S]*?```)/g);

    let currentChunk = '';

    for (const part of parts) {
      if (currentChunk.length + part.length > maxLength) {
        chunks.push(currentChunk);
        currentChunk = part;
      } else {
        currentChunk += part;
      }
    }

    if (currentChunk) {
      chunks.push(currentChunk);
    }
  } else {
    // Chia ƒë∆°n gi·∫£n cho tin nh·∫Øn kh√¥ng ph·∫£i m√£
    for (let i = 0; i < text.length; i += maxLength) {
      chunks.push(text.substring(i, i + maxLength));
    }
  }

  return chunks;
}

/**
 * Chia tin nh·∫Øn th√†nh c√°c ph·∫ßn nh·ªè h∆°n, t√¥n tr·ªçng ranh gi·ªõi t·ª´
 * ƒë·ªÉ kh√¥ng c·∫Øt t·ª´ gi·ªØa ch·ª´ng
 */
function splitMessageRespectWords(text, maxLength = 2000) {
  const chunks = [];

  // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho kh·ªëi m√£
  if (text.includes('```')) {
    // Chia theo kh·ªëi m√£ v√† k·∫øt h·ª£p l·∫°i ƒë·ªÉ tr√°nh l√†m gi√°n ƒëo·∫°n ch√∫ng
    const parts = text.split(/(```(?:\w+)?\n[\s\S]*?```)/g);

    let currentChunk = '';

    for (const part of parts) {
      if (currentChunk.length + part.length > maxLength) {
        chunks.push(currentChunk);
        currentChunk = part;
      } else {
        currentChunk += part;
      }
    }

    if (currentChunk) {
      chunks.push(currentChunk);
    }
  } else {
    // Chia th√¥ng minh theo ranh gi·ªõi t·ª´ cho tin nh·∫Øn kh√¥ng ph·∫£i m√£
    let startPos = 0;

    while (startPos < text.length) {
      // N·∫øu ƒëo·∫°n c√≤n l·∫°i ng·∫Øn h∆°n maxLength, l·∫•y h·∫øt
      if (startPos + maxLength >= text.length) {
        chunks.push(text.substring(startPos));
        break;
      }

      // T√¨m v·ªã tr√≠ kho·∫£ng tr·∫Øng g·∫ßn nh·∫•t g·∫ßn maxLength
      let endPos = startPos + maxLength;
      while (endPos > startPos && text[endPos] !== ' ' && text[endPos] !== '\n') {
        endPos--;
      }

      // N·∫øu kh√¥ng t√¨m th·∫•y kho·∫£ng tr·∫Øng, bu·ªôc ph·∫£i c·∫Øt ·ªü maxLength
      if (endPos === startPos) {
        endPos = startPos + maxLength;
      } else {
        // N·∫øu t√¨m th·∫•y kho·∫£ng tr·∫Øng, l·∫•y h·∫øt kho·∫£ng tr·∫Øng ƒë√≥
        endPos++;
      }

      chunks.push(text.substring(startPos, endPos));
      startPos = endPos;
    }
  }

  return chunks;
}

/**
 * H√†m ch√≠nh x·ª≠ l√Ω s·ª± ki·ªán MessageCreate khi bot ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
 * @param {import('discord.js').Message} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
 * @param {import('discord.js').Client} client - Client Discord.js
 */
async function handleMentionMessage(message, client) {
  // B·ªè qua tin nh·∫Øn t·ª´ bot
  if (message.author.bot) return;

  // Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn khi bot ƒë∆∞·ª£c tag tr·ª±c ti·∫øp
  if (message.mentions.has(client.user)) {
    // Ki·ªÉm tra xem tin nh·∫Øn c√≥ mention @everyone ho·∫∑c @role kh√¥ng
    const hasEveryoneOrRoleMention = message.mentions.everyone || message.mentions.roles.size > 0;

    // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i l√† c·∫£nh b√°o t·ª´ ch·ª©c nƒÉng gi√°m s√°t kh√¥ng
    const isMonitorWarning = message.content.includes('**C·∫¢NH B√ÅO') ||
                            message.content.includes('**L∆∞u √Ω') ||
                            message.content.includes('**C·∫¢NH B√ÅO NGH√äM TR·ªåNG');

    // N·∫øu kh√¥ng ph·∫£i c·∫£nh b√°o t·ª´ ch·ª©c nƒÉng gi√°m s√°t v√† kh√¥ng c√≥ mention @everyone ho·∫∑c @role,
    // x·ª≠ l√Ω nh∆∞ tin nh·∫Øn tr√≤ chuy·ªán b√¨nh th∆∞·ªùng b·∫±ng h√†m handleMessage
    if (!isMonitorWarning && !hasEveryoneOrRoleMention) {
      // Th√™m th√¥ng tin ng∆∞·ªùi d√πng v√†o log ƒë·ªÉ g·ª° l·ªói
      logger.info('CHAT', `X·ª≠ l√Ω tin nh·∫Øn tr√≤ chuy·ªán t·ª´ ${message.author.tag} (ID: ${message.author.id})`);
      logger.info('CHAT', `K√™nh: ${message.channel.type === 'DM' ? 'DM' : message.channel.name} trong ${message.guild ? message.guild.name : 'DM'}`);
      logger.info('CHAT', `N·ªôi dung: ${message.content.substring(0, 50)}${message.content.length > 50 ? '...' : ''}`);
      
      try {
        // ƒê·∫£m b·∫£o r·∫±ng ch√∫ng ta truy·ªÅn ƒë·ªëi t∆∞·ª£ng message ƒë·ªÉ c√≥ th·ªÉ l·∫•y ID ng∆∞·ªùi d√πng ch√≠nh x√°c
        await handleMessage(message); 
        logger.info('CHAT', `ƒê√£ x·ª≠ l√Ω tin nh·∫Øn tr√≤ chuy·ªán th√†nh c√¥ng cho ${message.author.tag}`);
      } catch (error) {
        logger.error('CHAT', `L·ªói khi x·ª≠ l√Ω tin nh·∫Øn tr√≤ chuy·ªán t·ª´ ${message.author.tag}:`, error);
        // Ph·∫£n h·ªìi l·ªói cho ng∆∞·ªùi d√πng 
        await message.reply('Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    } else if (hasEveryoneOrRoleMention) {
      logger.debug('CHAT', `B·ªè qua tin nh·∫Øn c√≥ mention @everyone ho·∫∑c @role t·ª´ ${message.author.tag}`);
    } else if (isMonitorWarning) {
      logger.debug('CHAT', `B·ªè qua tin nh·∫Øn c·∫£nh b√°o t·ª´ monitor t·ª´ ${message.author.tag}`);
    }
  }
}

module.exports = {
  handleMessage, // Gi·ªØ l·∫°i export n√†y n·∫øu c·∫ßn d√πng ·ªü n∆°i kh√°c
  handleMentionMessage, // Export h√†m m·ªõi
  processXp,
  splitMessage,
  splitMessageRespectWords // Export the splitMessageRespectWords function
};
