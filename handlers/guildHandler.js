const { REST, Routes } = require('discord.js');
const fs = require('fs');
const path = require('path');
const mongoClient = require('../services/mongoClient.js');

/**
 * L∆∞u th√¥ng tin guild v√†o MongoDB
 * @param {Discord.Guild} guild - Guild c·∫ßn l∆∞u th√¥ng tin
 */
async function storeGuildInDB(guild) {
  try {
    const db = await mongoClient.getDbSafe();
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu guild ƒë·ªÉ l∆∞u tr·ªØ
    const guildData = {
      guildId: guild.id,
      name: guild.name,
      memberCount: guild.memberCount,
      ownerID: guild.ownerId,
      icon: guild.iconURL(),
      joinedAt: new Date(),
      prefix: '!', // Prefix m·∫∑c ƒë·ªãnh n·∫øu s·ª≠ d·ª•ng
      settings: {
        welcomeChannel: null,
        moderationEnabled: true,
        autoRoles: []
      }
    };
    
    // Upsert guild v√†o c∆° s·ªü d·ªØ li·ªáu (th√™m m·ªõi ho·∫∑c c·∫≠p nh·∫≠t n·∫øu ƒë√£ t·ªìn t·∫°i)
    await db.collection('guilds').updateOne(
      { guildId: guild.id }, 
      { $set: guildData },
      { upsert: true }
    );
    
    console.log(`\x1b[32m%s\x1b[0m`, `ƒê√£ l∆∞u th√¥ng tin server ${guild.name} v√†o MongoDB`);
  } catch (error) {
    console.error(`\x1b[31m%s\x1b[0m`, `L·ªói khi l∆∞u th√¥ng tin guild v√†o MongoDB:`, error);
  }
}

/**
 * X√≥a th√¥ng tin guild kh·ªèi MongoDB
 * @param {string} guildId - ID c·ªßa guild c·∫ßn x√≥a
 */
async function removeGuildFromDB(guildId) {
  try {
    const db = await mongoClient.getDbSafe();
    
    // X√≥a th√¥ng tin guild t·ª´ c∆° s·ªü d·ªØ li·ªáu
    await db.collection('guilds').deleteOne({ guildId: guildId });
    console.log(`\x1b[33m%s\x1b[0m`, `ƒê√£ x√≥a th√¥ng tin server ID: ${guildId} kh·ªèi MongoDB`);
  } catch (error) {
    console.error(`\x1b[31m%s\x1b[0m`, `L·ªói khi x√≥a guild t·ª´ MongoDB:`, error);
  }
}

/**
 * L·∫•y th√¥ng tin guild t·ª´ MongoDB
 * @param {string} guildId - ID c·ªßa guild c·∫ßn l·∫•y th√¥ng tin
 */
async function getGuildFromDB(guildId) {
  try {
    const db = await mongoClient.getDbSafe();
    
    // L·∫•y th√¥ng tin guild t·ª´ c∆° s·ªü d·ªØ li·ªáu
    const guildData = await db.collection('guilds').findOne({ guildId: guildId });
    
    return guildData;
  } catch (error) {
    console.error(`\x1b[31m%s\x1b[0m`, `L·ªói khi l·∫•y th√¥ng tin guild t·ª´ MongoDB:`, error);
    return null;
  }
}

/**
 * C·∫≠p nh·∫≠t c√†i ƒë·∫∑t guild trong MongoDB
 * @param {string} guildId - ID c·ªßa guild c·∫ßn c·∫≠p nh·∫≠t
 * @param {Object} settings - ƒê·ªëi t∆∞·ª£ng ch·ª©a c√†i ƒë·∫∑t c·∫ßn c·∫≠p nh·∫≠t
 */
async function updateGuildSettings(guildId, settings) {
  try {
    const db = await mongoClient.getDbSafe();
    
    // C·∫≠p nh·∫≠t c√†i ƒë·∫∑t guild trong c∆° s·ªü d·ªØ li·ªáu
    await db.collection('guilds').updateOne(
      { guildId: guildId },
      { $set: { settings: settings } }
    );
    
    console.log(`\x1b[32m%s\x1b[0m`, `ƒê√£ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t cho server ID: ${guildId}`);
    return true;
  } catch (error) {
    console.error(`\x1b[31m%s\x1b[0m`, `L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t guild:`, error);
    return false;
  }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán khi bot tham gia m·ªôt guild m·ªõi
 * @param {Discord.Guild} guild - Guild m·ªõi m√† bot v·ª´a tham gia
 */
async function handleGuildJoin(guild, commands) {
  console.log(`\x1b[32m%s\x1b[0m`, `Bot ƒë√£ ƒë∆∞·ª£c th√™m v√†o server m·ªõi: ${guild.name} (id: ${guild.id})`);
  console.log(`\x1b[33m%s\x1b[0m`, `Server hi·ªán c√≥ ${guild.memberCount} th√†nh vi√™n`);
  
  try {
    // L∆∞u th√¥ng tin guild v√†o MongoDB
    await storeGuildInDB(guild);
    
    // Tri·ªÉn khai slash commands cho guild m·ªõi
    await deployCommandsToGuild(guild.id, commands);
    console.log(`\x1b[32m%s\x1b[0m`, `ƒê√£ tri·ªÉn khai c√°c l·ªánh slash cho server: ${guild.name}`);
    
    // Th√¥ng b√°o cho ch·ªß s·ªü h·ªØu server ho·∫∑c k√™nh m·∫∑c ƒë·ªãnh n·∫øu c√≥ th·ªÉ
    const defaultChannel = findDefaultChannel(guild);
    if (defaultChannel) {
      await defaultChannel.send({
        content: `üëã Xin ch√†o! Luna ƒë√£ s·∫µn s√†ng h·ªó tr·ª£ server **${guild.name}**!\n` +
                 `üîç T·∫•t c·∫£ c√°c l·ªánh slash ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông c√†i ƒë·∫∑t.\n` +
                 `üí¨ B·∫°n c√≥ th·ªÉ chat v·ªõi m√¨nh b·∫±ng c√°ch @mention Luna ho·∫∑c s·ª≠ d·ª•ng c√°c l·ªánh slash.\n` +
                 `‚ú® C·∫£m ∆°n ƒë√£ th√™m m√¨nh v√†o server!`
      });
    }
  } catch (error) {
    console.error(`\x1b[31m%s\x1b[0m`, `L·ªói khi x·ª≠ l√Ω guild m·ªõi:`, error);
  }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán khi bot r·ªùi kh·ªèi m·ªôt guild
 * @param {Discord.Guild} guild - Guild m√† bot v·ª´a r·ªùi kh·ªèi
 */
function handleGuildLeave(guild) {
  console.log(`\x1b[33m%s\x1b[0m`, `Bot ƒë√£ r·ªùi kh·ªèi server: ${guild.name} (id: ${guild.id})`);
  
  // X√≥a th√¥ng tin guild kh·ªèi MongoDB
  removeGuildFromDB(guild.id);
}

/**
 * Tri·ªÉn khai slash commands cho m·ªôt guild c·ª• th·ªÉ
 * @param {string} guildId - ID c·ªßa guild c·∫ßn tri·ªÉn khai l·ªánh
 * @param {Array} commands - M·∫£ng c√°c l·ªánh c·∫ßn tri·ªÉn khai (t√πy ch·ªçn)
 */
async function deployCommandsToGuild(guildId, existingCommands = null) {
  try {
    const token = process.env.DISCORD_TOKEN;
    const clientId = process.env.CLIENT_ID;
    
    if (!token) {
      throw new Error('DISCORD_TOKEN kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng');
    }
    
    if (!clientId) {
      throw new Error('CLIENT_ID kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng');
    }
    
    // T·∫°o REST client
    const rest = new REST({ version: '10' }).setToken(token);
    
    // N·∫øu kh√¥ng c√≥ l·ªánh ƒë∆∞·ª£c cung c·∫•p, t·∫£i l·∫°i t·ª´ th∆∞ m·ª•c commands
    let commands = existingCommands;
    if (!commands) {
      commands = [];
      const commandsPath = path.join(__dirname, '..', 'commands');
      const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
      
      for (const file of commandFiles) {
        const filePath = path.join(commandsPath, file);
        const command = require(filePath);
        if ('data' in command && 'execute' in command) {
          commands.push(command.data.toJSON());
        }
      }
    }
    
    // Tri·ªÉn khai l·ªánh ƒë·∫øn guild c·ª• th·ªÉ
    console.log(`\x1b[36m%s\x1b[0m`, `B·∫Øt ƒë·∫ßu tri·ªÉn khai ${commands.length} l·ªánh ƒë·∫øn guild ID: ${guildId}`);
    console.log(`\x1b[36m%s\x1b[0m`, `S·ª≠ d·ª•ng CLIENT_ID: ${clientId}`);
    
    const data = await rest.put(
      Routes.applicationGuildCommands(clientId, guildId),
      { body: commands }
    );
    
    console.log(`\x1b[32m%s\x1b[0m`, `ƒê√£ tri·ªÉn khai th√†nh c√¥ng ${data.length} l·ªánh ƒë·∫øn guild ID: ${guildId}`);
    return data;
  } catch (error) {
    console.error(`\x1b[31m%s\x1b[0m`, 'L·ªói khi tri·ªÉn khai l·ªánh ƒë·∫øn guild:', error);
    throw error;
  }
}

/**
 * T√¨m k√™nh m·∫∑c ƒë·ªãnh ƒë·ªÉ g·ª≠i tin nh·∫Øn ch√†o m·ª´ng
 * @param {Discord.Guild} guild - Guild ƒë·ªÉ t√¨m k√™nh m·∫∑c ƒë·ªãnh
 * @returns {Discord.TextChannel|null} - K√™nh vƒÉn b·∫£n m·∫∑c ƒë·ªãnh ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
function findDefaultChannel(guild) {
  // C√°c ph∆∞∆°ng ph√°p t√¨m k√™nh m·∫∑c ƒë·ªãnh theo th·ª© t·ª± ∆∞u ti√™n
  
  // 1. T√¨m k√™nh c√≥ t√™n 'general' ho·∫∑c 'chung'
  let channel = guild.channels.cache.find(
    channel => channel.type === 0 && // TextChannel
    (channel.name === 'general' || channel.name === 'chung') && 
    channel.permissionsFor(guild.members.me).has(['SendMessages', 'ViewChannel'])
  );
  
  if (channel) return channel;
  
  // 2. T√¨m k√™nh m√† bot c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn v√† hi·ªÉn th·ªã
  channel = guild.channels.cache.find(
    channel => channel.type === 0 && // TextChannel
    channel.permissionsFor(guild.members.me).has(['SendMessages', 'ViewChannel'])
  );
  
  return channel; // C√≥ th·ªÉ null n·∫øu kh√¥ng t√¨m th·∫•y k√™nh ph√π h·ª£p
}

/**
 * Thi·∫øt l·∫≠p x·ª≠ l√Ω s·ª± ki·ªán guild cho client
 * @param {Discord.Client} client - Discord client c·∫ßn thi·∫øt l·∫≠p
 * @param {Array} commands - M·∫£ng c√°c l·ªánh ƒë√£ t·∫£i (t√πy ch·ªçn)
 */
function setupGuildHandlers(client, commands = null) {
  // S·ª± ki·ªán khi bot tham gia guild m·ªõi/initSystem.js');
  client.on('guildCreate', guild => handleGuildJoin(guild, commands));
  nction setupGuildHandlers(client, commands) {
  // S·ª± ki·ªán khi bot r·ªùi kh·ªèi guildy initialized before setting up guild handlers
  client.on('guildDelete', guild => handleGuildLeave(guild));
    // Ensure MongoDB is ready to use
  // T·∫£i t·∫•t c·∫£ guild hi·ªán t·∫°i v√†o MongoDB khi kh·ªüi ƒë·ªông
  client.once('ready', async () => {
    try {t.on(Events.GuildCreate, async guild => {
      console.log('\x1b[36m%s\x1b[0m', 'ƒêang ƒë·ªìng b·ªô th√¥ng tin servers v·ªõi MongoDB...');
        console.log(`Bot ƒë√£ tham gia guild m·ªõi: ${guild.name}`);
      // L·∫•y t·∫•t c·∫£ guild m√† bot hi·ªán ƒëang tham gia
      const guilds = client.guilds.cache;n
      let syncCount = 0; mongoClient.getDbSafe();
        
      // Duy·ªát qua t·ª´ng guild v√† l∆∞u th√¥ng tin v√†o MongoDB
      for (const guild of guilds.values()) {One(
        await storeGuildInDB(guild);
        syncCount++;
      }     $set: { 
              guildId: guild.id, 
      console.log('\x1b[32m%s\x1b[0m', `ƒê√£ ƒë·ªìng b·ªô th√†nh c√¥ng ${syncCount}/${guilds.size} servers v·ªõi MongoDB`);
    } catch (error) {count: guild.memberCount,
      console.error('\x1b[31m%s\x1b[0m', 'L·ªói khi ƒë·ªìng b·ªô servers v·ªõi MongoDB:', error);
    }         lastUpdated: new Date()
  });       } 
          },
  console.log('\x1b[36m%s\x1b[0m', 'ƒê√£ thi·∫øt l·∫≠p x·ª≠ l√Ω s·ª± ki·ªán guild v·ªõi MongoDB');
});
        
// Export c√°c h√†m ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c file kh√°cild.name} v√†o c∆° s·ªü d·ªØ li·ªáu`);
module.exports = {
  handleGuildJoin,itional guild setup here...
  handleGuildLeave,r) {
  deployCommandsToGuild,·ªói khi x·ª≠ l√Ω guild m·ªõi:', error);
  setupGuildHandlers,
  getGuildFromDB,
  updateGuildSettings,
  storeGuildInDB guild-related event handlers here...
};};
  
  // If system is ready, set up immediately; otherwise wait
  if (initSystem.getStatus().initialized) {
    setupHandlers();
  } else {
    initSystem.once('ready', setupHandlers);
  }
}

module.exports = { setupGuildHandlers };


// Export c√°c h√†m ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c file kh√°c
module.exports = {
  handleGuildJoin,
  handleGuildLeave,
  deployCommandsToGuild,
  setupGuildHandlers,
  getGuildFromDB,
  updateGuildSettings,
  storeGuildInDB
};
