/**
 * Script ƒë·ªÉ ch·∫©n ƒëo√°n v√† kh·∫Øc ph·ª•c c√°c v·∫•n ƒë·ªÅ SSL
 */
require('dotenv').config();
const axios = require('axios');
const https = require('https');
const fs = require('fs');
const path = require('path');
const { checkApiStatus } = require('./utils/apiHelper');

// Danh s√°ch c√°c API endpoint ƒë·ªÉ ki·ªÉm tra
const API_ENDPOINTS = [
  'api.grok.ai',
  'api.groq.com',
  'api.openai.com'
];

// T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
const logDir = path.join(__dirname, 'logs');
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir);
}

// H√†m ch√≠nh ƒë·ªÉ ch·∫©n ƒëo√°n v·∫•n ƒë·ªÅ
async function diagnoseSslIssues() {
  console.log('B·∫Øt ƒë·∫ßu ch·∫©n ƒëo√°n v·∫•n ƒë·ªÅ k·∫øt n·ªëi API...');
  
  // Ghi l·∫°i th√¥ng tin m√¥i tr∆∞·ªùng
  const nodeVersion = process.version;
  const osInfo = {
    platform: process.platform,
    release: process.release,
    version: process.version
  };
  
  console.log(`Phi√™n b·∫£n Node.js: ${nodeVersion}`);
  console.log(`H·ªá ƒëi·ªÅu h√†nh: ${osInfo.platform}`);
  
  // Ki·ªÉm tra c√°c endpoint API
  console.log('\nKi·ªÉm tra k·∫øt n·ªëi t·ªõi c√°c API endpoint:');
  const results = [];
  
  for (const endpoint of API_ENDPOINTS) {
    const status = await checkApiStatus(endpoint);
    results.push(status);
    
    console.log(`\n- ${endpoint}:`);
    console.log(`  DNS ph√¢n gi·∫£i: ${status.dnsResolved ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);
    if (status.dnsResolved) {
      console.log(`  IP addresses: ${status.ipAddresses.join(', ')}`);
    }
    console.log(`  K·∫øt n·ªëi HTTPS: ${status.canConnect ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);
  }
  
  // L∆∞u k·∫øt qu·∫£ v√†o file log
  const logFile = path.join(logDir, `api-diagnosis-${new Date().toISOString().replace(/:/g, '-')}.json`);
  fs.writeFileSync(logFile, JSON.stringify({
    timestamp: new Date().toISOString(),
    nodeVersion,
    osInfo,
    apiResults: results
  }, null, 2));
  
  console.log(`\nK·∫øt qu·∫£ ch·∫©n ƒëo√°n ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: ${logFile}`);
  
  // Ki·ªÉm tra kh·∫£ nƒÉng k·∫øt n·ªëi b·ªè qua SSL
  console.log('\nƒêang th·ª≠ k·∫øt n·ªëi v·ªõi c·∫•u h√¨nh SSL ƒë·∫∑c bi·ªát...');
  
  // T·∫°o m·ªôt instance axios v·ªõi t√πy ch·ªçn b·ªè qua l·ªói SSL
  const httpsAgent = new https.Agent({
    rejectUnauthorized: false
  });
  
  try {
    // Th·ª≠ k·∫øt n·ªëi v·ªõi API m·∫∑c ƒë·ªãnh
    const response = await axios.get(`https://${API_ENDPOINTS[0]}/v1/models`, {
      httpsAgent,
      headers: {
        'Authorization': `Bearer ${process.env.GROK_API_KEY}`
      },
      timeout: 5000
    });
    
    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng khi b·ªè qua x√°c th·ª±c SSL!');
    console.log('üëâ ƒê·ªÅ xu·∫•t: C·∫≠p nh·∫≠t GrokClient ƒë·ªÉ b·ªè qua x√°c th·ª±c SSL (ƒë√£ th·ª±c hi·ªán trong b·∫£n c·∫≠p nh·∫≠t)');
  } catch (error) {
    console.log('‚ùå V·∫´n kh√¥ng th·ªÉ k·∫øt n·ªëi ngay c·∫£ khi b·ªè qua SSL.');
    console.log(`L·ªói: ${error.message}`);
    
    // Th·ª≠ endpoint thay th·∫ø
    try {
      console.log('\nƒêang th·ª≠ k·∫øt n·ªëi v·ªõi endpoint thay th·∫ø...');
      const altResponse = await axios.get(`https://${API_ENDPOINTS[1]}/v1/models`, {
        httpsAgent,
        headers: {
          'Authorization': `Bearer ${process.env.GROK_API_KEY}`
        },
        timeout: 5000
      });
      
      console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi API thay th·∫ø!');
      console.log('üëâ ƒê·ªÅ xu·∫•t: Thay ƒë·ªïi baseURL trong GrokClient sang API thay th·∫ø (ƒë√£ th·ª±c hi·ªán trong b·∫£n c·∫≠p nh·∫≠t)');
    } catch (altError) {
      console.log('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API thay th·∫ø.');
      console.log(`L·ªói: ${altError.message}`);
    }
  }
  
  console.log('\n=== K·∫øt lu·∫≠n ===');
  console.log('1. ƒê√£ c·∫≠p nh·∫≠t m√£ ngu·ªìn ƒë·ªÉ x·ª≠ l√Ω l·ªói SSL');
  console.log('2. Ki·ªÉm tra xem m·∫°ng c√≥ ch·∫∑n k·∫øt n·ªëi ƒë·∫øn c√°c API kh√¥ng');
  console.log('3. X√°c minh kh√≥a API c·ªßa b·∫°n c√≥ h·ª£p l·ªá v√† ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng');
  console.log('4. Kh·ªüi ƒë·ªông l·∫°i bot sau khi c·∫≠p nh·∫≠t m√£ ngu·ªìn');
}

// Ch·∫°y ch·∫©n ƒëo√°n
diagnoseSslIssues().catch(console.error);
