  /**
   * X·ª≠ l√Ω vi ph·∫°m
   * @param {Discord.Message} message - Tin nh·∫Øn vi ph·∫°m
   * @param {Object} results - K·∫øt qu·∫£ ph√¢n t√≠ch
   */
  async handleViolation(message, results) {
    try {
      // L·∫•y c√†i ƒë·∫∑t gi√°m s√°t cho guild
      const settings = this.monitorSettings.get(message.guild.id);
      if (!settings || !settings.enabled) return;
      
      // X√°c ƒë·ªãnh h√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán d·ª±a tr√™n quy t·∫Øc vi ph·∫°m
      let actionToTake = 'warn'; // M·∫∑c ƒë·ªãnh l√† c·∫£nh b√°o
      
      // T√¨m quy t·∫Øc vi ph·∫°m trong danh s√°ch ruleActions
      if (settings.ruleActions && results.violatedRule) {
        // N·∫øu violatedRule l√† s·ªë th·ª© t·ª± quy t·∫Øc
        if (!isNaN(results.violatedRule)) {
          const ruleIndex = parseInt(results.violatedRule) - 1;
          if (ruleIndex >= 0 && ruleIndex < settings.ruleActions.length) {
            actionToTake = settings.ruleActions[ruleIndex].action;
          }
        } else {
          // T√¨m quy t·∫Øc d·ª±a tr√™n n·ªôi dung
          const matchingRule = settings.ruleActions.find(item => 
            item.rule.toLowerCase() === results.violatedRule.toLowerCase() ||
            results.violatedRule.toLowerCase().includes(item.rule.toLowerCase())
          );
          
          if (matchingRule) {
            actionToTake = matchingRule.action;
          }
        }
      }
      
      // T·∫°o embed th√¥ng b√°o vi ph·∫°m cho k√™nh log
      const violationEmbed = new EmbedBuilder()
        .setColor(
          results.severity === 'Cao' ? 0xFF0000 :
          results.severity === 'Trung b√¨nh' ? 0xFFA500 : 0xFFFF00
        )
        .setTitle(`üö® Ph√°t hi·ªán vi ph·∫°m ${results.isFakeAccount ? '(C√≥ d·∫•u hi·ªáu t√†i kho·∫£n gi·∫£ m·∫°o)' : ''}`)
        .setDescription(`Bot ƒë√£ ph√°t hi·ªán m·ªôt tin nh·∫Øn vi ph·∫°m quy t·∫Øc server.`)
        .addFields(
          { name: 'Ng∆∞·ªùi d√πng', value: `<@${message.author.id}> (${message.author.tag})`, inline: true },
          { name: 'K√™nh', value: `<#${message.channel.id}>`, inline: true },
          { name: 'Th·ªùi gian', value: `<t:${Math.floor(message.createdTimestamp / 1000)}:F>`, inline: true },
          { name: 'Quy t·∫Øc vi ph·∫°m', value: results.violatedRule, inline: true },
          { name: 'M·ª©c ƒë·ªô', value: results.severity, inline: true },
          { name: 'H√†nh ƒë·ªông', value: actionToTake, inline: true },
          { name: 'L√Ω do', value: results.reason },
          { name: 'N·ªôi dung tin nh·∫Øn', value: message.content.length > 1024 ? message.content.substring(0, 1021) + '...' : message.content }
        )
        .setFooter({ text: `Message ID: ${message.id}` })
        .setTimestamp();

      // Ki·ªÉm tra c√†i ƒë·∫∑t k√™nh log t·ª´ c∆° s·ªü d·ªØ li·ªáu
      const db = mongoClient.getDb();
      const logSettings = await db.collection('mod_settings').findOne({
        guildId: message.guild.id
      });

      let logChannel = null;

      // N·∫øu c√≥ c√†i ƒë·∫∑t k√™nh log v√† monitorLogs ƒë∆∞·ª£c b·∫≠t
      if (logSettings && logSettings.logChannelId && logSettings.monitorLogs !== false) {
        try {
          logChannel = await message.guild.channels.fetch(logSettings.logChannelId);
        } catch (error) {
          console.error(`Kh√¥ng th·ªÉ t√¨m th·∫•y k√™nh log ${logSettings.logChannelId}:`, error);
        }
      }

      // N·∫øu kh√¥ng c√≥ k√™nh log ƒë∆∞·ª£c c√†i ƒë·∫∑t, t√¨m k√™nh m·∫∑c ƒë·ªãnh
      if (!logChannel) {
        logChannel = message.guild.channels.cache.find(
          channel => channel.name.includes('mod-logs') ||
                    channel.name.includes('mod-chat') ||
                    channel.name.includes('admin') ||
                    channel.name.includes('bot-logs')
        );
      }

      // G·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh log
      if (logChannel && logChannel.isTextBased()) {
        await logChannel.send({ embeds: [violationEmbed] });
      }

      // T·∫°o tin nh·∫Øn c·∫£nh b√°o tr·ª±c ti·∫øp cho ng∆∞·ªùi vi ph·∫°m
      let warningMessage = `<@${message.author.id}> `;

      // T·∫°o n·ªôi dung c·∫£nh b√°o d·ª±a tr√™n h√†nh ƒë·ªông v√† m·ª©c ƒë·ªô nghi√™m tr·ªçng
      const actionEmoji = {
        'warn': '‚ö†Ô∏è',
        'mute': 'üîá',
        'kick': 'üë¢',
        'ban': 'üö´'
      };
      
      if (actionToTake === 'ban') {
        warningMessage += `${actionEmoji.ban} **C·∫¢NH B√ÅO NGHI√äM TR·ªåNG**: ${results.reason}. `;
        warningMessage += `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}. `;
        warningMessage += `H√†nh vi n√†y c√≥ th·ªÉ d·∫´n ƒë·∫øn vi·ªác b·ªã ban kh·ªèi server.`;
      } else if (actionToTake === 'kick') {
        warningMessage += `${actionEmoji.kick} **C·∫¢NH B√ÅO NGHI√äM TR·ªåNG**: ${results.reason}. `;
        warningMessage += `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}. `;
        warningMessage += `H√†nh vi n√†y c√≥ th·ªÉ d·∫´n ƒë·∫øn vi·ªác b·ªã kick kh·ªèi server.`;
      } else if (actionToTake === 'mute') {
        warningMessage += `${actionEmoji.mute} **C·∫¢NH B√ÅO**: ${results.reason}. `;
        warningMessage += `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}. `;
        warningMessage += `H√†nh vi n√†y c√≥ th·ªÉ d·∫´n ƒë·∫øn vi·ªác b·ªã mute.`;
      } else {
        warningMessage += `${actionEmoji.warn} **C·∫¢NH B√ÅO**: ${results.reason}. `;
        warningMessage += `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}. `;
        warningMessage += `Vui l√≤ng tu√¢n th·ªß quy t·∫Øc c·ªßa server.`;
      }

      // G·ª≠i c·∫£nh b√°o tr·ª±c ti·∫øp v√†o k√™nh
      try {
        await message.channel.send(warningMessage);
      } catch (error) {
        console.error('Kh√¥ng th·ªÉ g·ª≠i c·∫£nh b√°o tr·ª±c ti·∫øp:', error);
      }

      // Th·ª±c hi·ªán h√†nh ƒë·ªông t·ª± ƒë·ªông d·ª±a tr√™n actionToTake
      try {
        // Lu√¥n x√≥a tin nh·∫Øn vi ph·∫°m n·∫øu h√†nh ƒë·ªông l√† mute, kick ho·∫∑c ban
        if (actionToTake !== 'warn') {
          try {
            await message.delete();
            console.log(`ƒê√£ x√≥a tin nh·∫Øn vi ph·∫°m t·ª´ ${message.author.tag}`);
          } catch (error) {
            console.error('Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn:', error);
          }
        }
        
        // Th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng
        if (actionToTake === 'mute') {
          // Mute ng∆∞·ªùi d√πng (timeout)
          const muteDuration = 10 * 60 * 1000; // 10 ph√∫t
          await message.member.timeout(muteDuration, `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}`);
          console.log(`ƒê√£ mute ${message.author.tag} trong 10 ph√∫t v√¨ vi ph·∫°m quy t·∫Øc`);
        } else if (actionToTake === 'kick') {
          // Kick ng∆∞·ªùi d√πng
          await message.member.kick(`Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}`);
          console.log(`ƒê√£ kick ${message.author.tag} v√¨ vi ph·∫°m quy t·∫Øc`);
        } else if (actionToTake === 'ban') {
          // Ban ng∆∞·ªùi d√πng
          await message.member.ban({
            reason: `Vi ph·∫°m quy t·∫Øc: ${results.violatedRule}`,
            deleteMessageSeconds: 86400 // X√≥a tin nh·∫Øn trong 24 gi·ªù
          });
          console.log(`ƒê√£ ban ${message.author.tag} v√¨ vi ph·∫°m quy t·∫Øc`);
        }
      } catch (error) {
        console.error(`Kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông ${actionToTake}:`, error);
        
        // G·ª≠i th√¥ng b√°o l·ªói ƒë·∫øn k√™nh log
        if (logChannel && logChannel.isTextBased()) {
          await logChannel.send(`‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông ${actionToTake} ƒë·ªëi v·ªõi <@${message.author.id}>: ${error.message}`);
        }
      }

    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω vi ph·∫°m:', error);
    }
  }
